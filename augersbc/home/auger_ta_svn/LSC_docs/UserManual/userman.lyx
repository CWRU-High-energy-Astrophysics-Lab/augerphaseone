#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 2cm
\rightmargin 1cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Auger North RDA Local Station Controller User Manual
\begin_inset Newline newline
\end_inset


\series bold
\shape italic
\size giant
\color red
Preliminary
\end_layout

\begin_layout Author
Laurent Guglielmi (laurent.guglielmi@apc.univ-paris7.fr)
\begin_inset Newline newline
\end_inset

Bernard Courty (bernard.courty@apc.univ-paris7.fr)
\begin_inset Newline newline
\end_inset

St√©phane Colonges (stephane.colonges@apc.univ-paris7.fr)
\begin_inset Newline newline
\end_inset

Cyril Dufour (cyril.dufour@apc.univ-paris7.fr)
\end_layout

\begin_layout Abstract
This paper describes the hardware and software of the Auger North Local
 Station Controller prototype number 2.
\end_layout

\begin_layout Abstract
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Abstract
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Hardware Description
\end_layout

\begin_layout Standard
The PCB size is 160x200 mm.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/photo-face-1.png
	lyxscale 50
	scale 40

\end_inset

 
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/photo-face-2.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Up and down sides.
 Connectors are all on the down side.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
LSC Content
\end_layout

\begin_layout Standard
The schematics are available in Appendix
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:LSC-Schematics"

\end_inset


\end_layout

\begin_layout Subsubsection
Ethernet interface
\end_layout

\begin_layout Subsubsection
CanBus Interface
\end_layout

\begin_layout Standard
Phillips sja1000 implemented as an IP in the Cyclone FPGA.
\end_layout

\begin_layout Subsubsection
Gps Receiver
\end_layout

\begin_layout Subsubsection
FPGA
\end_layout

\begin_layout Standard
Cyclone III housing the Time Tagging, Canbus interface and the Trigger firmware.
\end_layout

\begin_layout Subsubsection
Serial IOs
\end_layout

\begin_layout Subsubsection
Ram Disk
\end_layout

\begin_layout Standard
/ram0 is an 8 Megabytes ram disk, created at each reboot/power on of the
 LSC.
 Note that this is not a 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 ram disk, as it is re-initialized at each reset.
 It is mostly used to store temporary files (log files mostly), to store
 downloaded files and to house a copy of the USB disk services and acquisition
 executables and configuration files (TBDone).
\end_layout

\begin_layout Subsubsection
USB key
\end_layout

\begin_layout Standard
A 4 Gbytes USB key, with 2 partitions:
\end_layout

\begin_layout Itemize
/ : the root file system, 1 Gbytes
\end_layout

\begin_layout Itemize
/scr: Acquisition use, 3 Gbytes
\end_layout

\begin_layout Subsubsection
Slow Control ADC
\end_layout

\begin_layout Standard
Analog Device AD7490, 12 bits, 16 channels.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Usage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Battery Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FPGA Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.2 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VCC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.3 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Core Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.8 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Front-end current
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VCC Current
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Battery Current
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
V5 Voltage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5 Volts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unused
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unused
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unused
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:ADC-AD7554-channels"

\end_inset

ADC AD7554 channels assignement.
 The currents are measured 
\begin_inset Quotes eld
\end_inset

on the fly
\begin_inset Quotes erd
\end_inset

 and thus are very changing.
 Only the average over several measures is meaningful.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Slow Control DAC
\end_layout

\begin_layout Standard
Texas Instrument DAC7554, 12 bits, 0-2.5 Volts.
 Channel 0 is the FrontEnd High Voltage setting.
\end_layout

\begin_layout Subsubsection
Slow Control Temperature/Hygrometry
\end_layout

\begin_layout Standard
Sensirion SHT11 Humidity and Temperature sensor.
 The sensor is installed directly on the LSC PCB.
 It measures the temperature and the relative humidity.
\end_layout

\begin_layout Subsubsection
Flash ADCs
\end_layout

\begin_layout Standard
3 dual channels 10 bits, 100 MHz Flash ADCs LTC2280.
 The dynamic is selectable by a switch, either [-1,+1] V or [-0.5,+0.5] V.
 The Current setting: [-1, +1] Volts, ==> 2 V = 1024 adu.
 As a consequence, the base line (0) is around 512 ADU; this cannot be modified.
\end_layout

\begin_layout Standard
Each FADC chip can be powered by a switch.
 Unused FADC should be powered off to minimize power consumption.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Switch (PCB label)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sample
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FE Channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FADC (PCB label)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M92 - Pin 16/15
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dynode #5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M92 - Pin 1/2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M91 - Pin 1/2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x3FF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M93
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M91 - Pin 16/15
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0x3FF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unused
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M93
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
To change the synamic, move the jumper at position '0' on the following
 switches
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Switch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Channel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dynode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex30
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anodex0.1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Front-End interface
\end_layout

\begin_layout Standard
One SAMTEC connecteur.
 Assignement of the pins is shown in the table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Pin-assignement-between"

\end_inset

.
 The format of the samples on 2 consecutive 32 bits word is shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Test-FPGA-firmware:"

\end_inset

 for the Test (Courty) FPGA Trigger Firmware and in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Final-FPGA-Firmware:"

\end_inset

 for the final FPGA Trigger Firmware.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Signal
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SAMTEC Pin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comments
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anode x 30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FADC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anode x 1.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FADC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Anode x 0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FADC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dynode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anach4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FADC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HV Dac
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hvdac1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HV setting, 0-2.5 Volts.
 1 V = 727 HV
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HV Dac
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hvdac2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Pin-assignement-between"

\end_inset

Pin assignement between the SAMTEC connector and the FADC's.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename CourtySampleFormat.png
	lyxscale 80
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Test-FPGA-firmware:"

\end_inset

Test FPGA firmware: format of the samples .
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename StandardSampleFormat.png
	lyxscale 80
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Final-FPGA-Firmware:"

\end_inset

Final FPGA Firmware: format of the samples.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Setup
\end_layout

\begin_layout Subsection
IRQs 
\end_layout

\begin_layout Standard
The table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:IRQ-assignement"

\end_inset

 describes the interrupts specific to the Auger North Acquisition, not all
 the interrupts defined in the system.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="6">
<features tabularvalignment="middle">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PIO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Periph A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Periph B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Assignement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PB28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
123
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FIQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FIQ
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unused, too difficult to use!
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
PB29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
124
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
IRQ0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
1PPS - AIC 25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
Positive Edge, Priority 7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
PA26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
71
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color black
TWCK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
IRQ1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
EVTCLKS - AIC 26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
Positive Edge, Priority 5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
PA25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
72
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color black
TWD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
IRQ2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
EVTCLKF - AIC-27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\color red
Positive Edge, Priority 6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PA23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
69
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXD2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IRQ3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TXD2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not an IRQ
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PA2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SPCK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IRQ4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SPCK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar \ldots{}

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PA3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NPSC0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IRQ5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NPSC0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\SpecialChar \ldots{}

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PA16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EMDIOL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IRQ6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EMDIOL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.\SpecialChar \ldots{}

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:IRQ-assignement"

\end_inset

IRQ assignement
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Bank Registers
\end_layout

\begin_layout Itemize
CS5 = 0x60000000: Front-end - 0x3082
\end_layout

\begin_layout Itemize
CS6 = 0x70000000: Time Tagging - 0x3082
\end_layout

\begin_layout Itemize
CS7 = 0x80000000: Slow Control - 0x3083
\end_layout

\begin_layout Section
Operating System
\end_layout

\begin_layout Standard
The OS used in the LSC is Linux Debian 2.6.27 with I-Pipe and Xenomai 2.4.10.
 Boot is possible from the network OR the USB key (the default).
\end_layout

\begin_layout Subsection
Drivers
\end_layout

\begin_layout Subsubsection
SPI
\end_layout

\begin_layout Standard
The master SPI has 4 channels:
\end_layout

\begin_layout Itemize
Channel 0: the Serial Eprom housing u-Boot
\end_layout

\begin_layout Itemize
Channel 1: the DAC (DAC7554) via device /dev/spidev0.1
\end_layout

\begin_layout Itemize
Channel 2: the ADC (AD7490) via device /dev/spidev0.2
\end_layout

\begin_layout Itemize
Channel 3: unused (was connected to Canbus interface mcp2515, no longer
 used)
\end_layout

\begin_layout Subsubsection
Canbus
\end_layout

\begin_layout Standard
The driver is the 
\begin_inset Quotes eld
\end_inset

lincan-0.3.4
\begin_inset Quotes erd
\end_inset

 driver.
 Not a socket driver, interfaces to the sja1000 chip implemented in the
 Cyclone III FPGA.
\end_layout

\begin_layout Subsection
Interrupts handling
\end_layout

\begin_layout Standard
3 specific interrupts are not handled by standard Xenomai or Linux drivers
 (see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:IRQ-assignement"

\end_inset

).
\end_layout

\begin_layout Subsubsection
1PPS IRQ
\end_layout

\begin_layout Standard
The 1PPS Interrupts are handled by a Xenomai RealTime task, not a RTDM driver.
\end_layout

\begin_layout Subsubsection
/EVTCLKF Interrupts
\end_layout

\begin_layout Standard
The /EVTCLKS (Muon Event) interrupts are handled by a Xenomai RealTime task,
 not a RTDM driver.
\end_layout

\begin_layout Subsubsection
/EVTCLKS Interrupts
\end_layout

\begin_layout Standard
The /EVTCLKF (Fast Event) interrupts are handled by a Xenomai RealTime task,
 not a RTDM driver.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Sofware, Compilation and installation
\end_layout

\begin_layout Standard
The specific LSC software is available from the SVN repositiory at MTU,
 in the directory 
\series bold
an_lsc_sw
\series default
.
 The main development line is in 
\series bold
trunk
\series default
, tagged versions are in 
\series bold
tags
\series default
.
 The hierarchy is divided into several sub directories:
\end_layout

\begin_layout Itemize
Services: all the software related to general services (message server,
 gps receiver control, etc).
\end_layout

\begin_deeper
\begin_layout Itemize
Services/src: all the sources
\end_layout

\begin_layout Itemize
Services/include: include files
\end_layout

\begin_layout Itemize
Services/config: configuration files
\end_layout

\begin_layout Itemize
Services/bin_lsc: executable and tar balls
\end_layout

\begin_layout Itemize
Services/lib_lsc: libraries
\end_layout

\end_deeper
\begin_layout Itemize
Acq: All the software related to the acquisition/triggering
\end_layout

\begin_layout Itemize
Manager: general utilities to help editing, downloading, etc (used on the
 host, Linux or Mac)
\end_layout

\begin_layout Itemize
Documents
\end_layout

\begin_deeper
\begin_layout Itemize
Documents/UserManual
\end_layout

\begin_layout Itemize
Documents/Devices: description of the devices (manufacturer data)
\end_layout

\begin_layout Itemize
Documents/Schematics: LSC schematics
\end_layout

\begin_layout Itemize
Documents/ElectronicBox: detailed description of the electronic box
\end_layout

\end_deeper
\begin_layout Itemize
Crosstools
\end_layout

\begin_deeper
\begin_layout Itemize
Crosstools/crosstools-0.43.tar.gz: the tar ball used to download, compile and
 implement cross tools for ARM (gcc, ld, etc)
\end_layout

\end_deeper
\begin_layout Itemize
TarBalls: several tar balls containing include files and libraries needed
 to compile the software (linux and xenomai stuff)
\end_layout

\begin_layout Subsection
Installing cross tools
\end_layout

\begin_layout Standard
The file 
\series bold
trunk/CrossTools/crosstools-0.43.tar.gz
\series default
 contains all the files needed to compile and install the ARM cross tools,
 compiler, loader, etc.
 The cross tools version to use is 
\family typewriter
\shape italic
gcc-3.4.5-glibc-2.3.6
\shape default
;
\family default
to install the crosstools:
\end_layout

\begin_layout Enumerate
Copy the tar ball to a local directory
\end_layout

\begin_layout Enumerate
Untar the tar ball in the local directory
\end_layout

\begin_deeper
\begin_layout Enumerate
creates a directory 
\series bold
crosstools-0.43
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
cd crosstools-0.43
\end_layout

\begin_layout Enumerate
Edit the file: 
\series bold
demo-arm.sh
\end_layout

\begin_deeper
\begin_layout Itemize
Uncomment (suppress the sign #) the line containing '
\family typewriter
\series bold
#eval `cat arm.dat gcc-3.4.5-glibc-2.3.6.dat` sh all.sh --notest --nounpack
\family default
\series default
'
\end_layout

\begin_layout Itemize
Comment (add the sign #) the line containing '
\family typewriter
\series bold
eval `cat arm.dat gcc-4.1.0-glibc-2.3.2-tls.dat` sh all.sh --notest
\family default
\series default
'
\end_layout

\end_deeper
\begin_layout Enumerate
Edit the file: 
\series bold
arm.dat
\end_layout

\begin_deeper
\begin_layout Itemize
replace the line '
\series bold
TARGET=arm-unknown-linux-gnu
\series default
' with '
\series bold
TARGET=arm-linux
\series default
'
\end_layout

\end_deeper
\begin_layout Enumerate
Execute the script 
\series bold
demo-arm.sh
\series default
.
 The script will download all the necessary files, compile the cross tools
 and install them in 
\series bold
/opt/crosstool/gcc-3.4.5-glibc-2.3.6/arm-linux/bin/
\series default
.
 This operation takes a rather long time, be patient.
\end_layout

\begin_deeper
\begin_layout Itemize
The tools are named like: 
\shape italic
arm-linux-gcc
\shape default
, 
\shape italic
arm-linux-ld
\shape default
, etc
\end_layout

\end_deeper
\begin_layout Description
NOTE For installation on Mac OS X, have a look at the file 
\series bold
CrossTools/note-for-mac.txt
\end_layout

\begin_layout Subsection
Installing linux and xenomai stuff
\end_layout

\begin_layout Standard
Many include files and libraries are necessary to compile correctly the
 LSC software.
 The 
\series bold
trunk/TarBalls
\series default
 directory contains all the tar balls that have to be 'untarred'.
 The script 
\series bold
trunk/lsc_install
\series default
 is provided to do that and must be executed in the 
\series bold
trunk
\series default
 directory (the tar balls are untarred directly in 
\series bold
trunk
\series default
; as a consequence the following directories are created in 
\series bold
trunk
\series default
 (but re not managed by svn):
\end_layout

\begin_layout Itemize
lincan-0.3.4: CanBus stuff
\end_layout

\begin_layout Itemize
linux-2.6.27: Linux OS stuff
\end_layout

\begin_layout Itemize
xenomai-2.4 and xenomai: Xenomai stuff
\end_layout

\begin_layout Subsection
Preparing for compilation
\end_layout

\begin_layout Standard
For legacy reasons, the LSC software is not implemented under an IDE (like
 eclipse).
 All Makefiles are based upon several environment variables that MUST be
 defined properly.
 A template script 
\series bold
trunk/set_lsc_sw.tpl
\series default
 is provided.
 It MUST be adapted to local specifities and mst be run prior to any attempt
 to compile the LSC software.
\end_layout

\begin_layout Subsection
Compiling
\end_layout

\begin_layout Standard
The executables compiled are automatically created in the directory 
\series bold
trunk/Services/bin_lsc
\series default
 or 
\series bold
trunk/Acq/bin_lsc
\series default
.
 In addition, in the same directories, 2 scripts 
\series bold
dot
\series default
ar and 
\series bold
dotartest
\series default
 are used to create the tar balls l
\series bold
sc.tar.bz2 
\series default
and 
\series bold
lsctest.tar.bz2
\series default
 (for Services) or 
\series bold
acq.tar.bz2
\series default
 and 
\series bold
acqtest.tar.bz2
\series default
 (for Acq).
 These scripts are launched automatically when compiling the whole Services
 or Acq packages (see below).
\end_layout

\begin_layout Subsubsection
Single process
\end_layout

\begin_layout Standard
Just move to the relevant directory (in 
\series bold
trunk/Services/src
\series default
 or 
\series bold
trunk/Acq/src
\series default
), edit the source(s) files and just type 
\family typewriter
\series bold
make
\family default
\series default
.
\end_layout

\begin_layout Subsubsection
The whole Services or Acq package
\end_layout

\begin_layout Standard
In 
\series bold
trunk/Services/src
\series default
 or 
\series bold
trunk/Acq/src
\series default
, a general 
\series bold
Makefile
\series default
 can (re)make all the Services or Acq software.
 Just type 
\family typewriter
\series bold
make all
\family default
\series default
 to clean, compile, link, create the lsc tar balls and run doxygen; 
\family typewriter
\series bold
make full
\family default
\series default
 creates a new version number and then acts like 
\family typewriter
\series bold
make all
\family default
\series default
.
\end_layout

\begin_layout Subsubsection
The whole LSC software
\end_layout

\begin_layout Standard
A script 
\family typewriter
\series bold
mklsc
\family default
\series default
, in 
\series bold
trunk/Manager/bin
\series default
, chains 
\family typewriter
\series bold
make all
\family default
\series default
 or 
\family typewriter
\series bold
make full
\family default
\series default
 for Services and Acq, 
\family typewriter
\series bold
mklsc all
\family default
\series default
 to make all, 
\family typewriter
\series bold
mklsc full
\family default
\series default
 to make full.
\end_layout

\begin_layout Subsection
Downloading to the LSC
\end_layout

\begin_layout Standard
In the lab, without any radio, the best solution is to use the ethernet
 connection to download the software.
 All the executables, packages or specific test modules, MUST be downloaded
 to 
\series bold
/root/LSC/bin
\series default
, using 
\series bold
scp
\series default
 or 
\series bold
rsync
\series default
, and of course the tar balls (if downloaded) should be untarred at the
 same place (
\series bold
tar xjf <tarball>
\series default
).
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Software description
\end_layout

\begin_layout Standard
The LSC software is available at the SVN repositiory at 
\series bold
svn://<username>@server1.auger.mtu.edu/an_lsc_sw
\series default
 .
\end_layout

\begin_layout Standard
The LSC software is organised in 2 packages (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Global-Organisation-of"

\end_inset

), the 
\series bold
Services
\series default
 package (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Services-Software"

\end_inset

) and the 
\series bold
Acquisition
\series default
 package (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Acquisition"

\end_inset

).
 
\end_layout

\begin_layout Standard
The services handle the communications with CDAS (via the radio), the control
 of the GPS receiver as well as the control of the 1PPS interrupts and time
 keeping, the upload and download of files and the execution of shell remote
 commands from CDAS.
 The acquisition can be started/stopped independently of the services.
 The core of the services is the Message Server (msgsvr); all communication
 to and from CDAS go through the Message Server.
 The communication between any task and the Message Server are handled with
 Linux Message Queues.
 Any task willing to receive or send messages to or from CDAS must be registered
 by the Message Server.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename soft-scheme.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Global-Organisation-of"

\end_inset

Global Organisation of the LS Controller Software.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Communications LSC to CDAS
\end_layout

\begin_layout Standard
Messages between LS and CDAS are transfered in units called '
\emph on
frames
\emph default
' (do not confuse with CanBus Frames).
 A 
\emph on
frame
\emph default
 from LS to CDAS is made of at most 288 bytes (2304 bits).
 A 
\emph on
frame
\emph default
 from CDAS to LS may contain up to 2048 bytes (16 Kbits) 
\color red
TBConfirmed
\color inherit
.
 A frame may hold several 
\emph on
messages
\emph default
.
 
\emph on
Messages
\emph default
 that are too large to fit in one 
\emph on
frame
\emph default
 are sent by 
\begin_inset Quotes eld
\end_inset


\emph on
slices
\emph default

\begin_inset Quotes erd
\end_inset

.
 The principle is to fill the frame as much as possible.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename ls-cdas-msg-format.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LS to CDAS Frame
\begin_inset CommandInset label
LatexCommand label
name "fig:LS-to-CDAS"

\end_inset

 format.
 The length of the frame does NOT include itself.
 The length of a message DOES include itself.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cdas-ls-msg-format.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:CDAS-to-LS"

\end_inset

CDAS to LS Frame format.
 From CDAS, only one message at a time is sent, thus no number of messages.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
LS to CDAS Frame Format
\end_layout

\begin_layout Standard
An 
\emph on
LS to CDAS frame
\emph default
 may hold several 
\emph on
messages
\emph default
.
 It is made of a header followed by as many 
\emph on
messages
\emph default
 as needed.
 There is no trailer.
 The maximum size of a frame is 288 (
\color red
TBC
\color inherit
) bytes.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:LS-to-CDAS"

\end_inset

.
\end_layout

\begin_layout Enumerate
Frame length: one short integer (16 bits), the total length of the frame,
 
\series bold
NOT including itself
\series default
.
\end_layout

\begin_layout Enumerate
Frame NB: one byte, incremented at each frame.
\end_layout

\begin_layout Enumerate
Reserved: one byte unused, set to 0.
\end_layout

\begin_layout Enumerate
LSID: one short integer, the LS ID.
\end_layout

\begin_layout Enumerate
Nb Msg: one byte, the number of messages contained in the frame.
\end_layout

\begin_layout Subsubsection
Message Format
\end_layout

\begin_layout Standard
A 
\emph on
message
\emph default
 is made of a header followed by as many bytes of data as needed (and taking
 into account the maximum size of the frame).
 The message IDs are described in Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Messages-from-LSC"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Messages-from-CDAS"

\end_inset

.
\end_layout

\begin_layout Itemize
Message Length: 1 short integer (16 bits), the total nb of bytes of the
 message (
\series bold
including itself
\series default
)
\end_layout

\begin_layout Itemize
Completion/Slice: 1 byte for completion of message and slice number
\end_layout

\begin_deeper
\begin_layout Itemize
Completion: 2 most significant bits (00: full message, 01: first slice,
 10: middle slice, 11: last slice of the message).
\end_layout

\begin_layout Itemize
Slice number: 6 less significant bits, incremented at each slice
\end_layout

\end_deeper
\begin_layout Itemize
Message Type: 1 byte.
 See Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Messages-from-LSC"

\end_inset

 for the list of defined message IDs.
\end_layout

\begin_layout Itemize
Message Number/Version: 6 most significant bits are the message number,
 2 less significant are a message version.
 The message number is the same for all the slices of a given message.
\end_layout

\begin_layout Subsubsection
CDAS to LS Frame Format
\end_layout

\begin_layout Standard
A 
\emph on
frame
\emph default
 hold ony one 
\emph on
message
\emph default
.
 It is made of a header followed by the 
\emph on
message
\emph default
.
 There is no trailer.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CDAS-to-LS"

\end_inset

.
 The format of the message itself is the same as the LS to CDAS message
 format.
\end_layout

\begin_layout Itemize
Frame Length: one short integer (16 bits), the total length of the frame
 
\series bold
NOT including itself
\series default
,
\end_layout

\begin_layout Itemize
Reserved: 2 bytes unused.
 should be set to 0.
\end_layout

\begin_layout Itemize
Destination: the destination LsId or a list of LsId, as a set of short integers.
 The 2 most significant bits of the Destination describes the type of destinatio
n.
\end_layout

\begin_deeper
\begin_layout Itemize
00: Single LsId.
 The 14 other bits hold the LsId.
\end_layout

\begin_layout Itemize
11: Broadcast (all LSs).
 The 14 other bits are irrelevant.
\end_layout

\begin_layout Itemize
01: List of LsId.
 The 14 other bits hold the number of following LsId, each coded on a short
 int.
\end_layout

\begin_layout Itemize
11: AntiList od LsId.
 Same as above: all the LS except those in the antilist.
\end_layout

\end_deeper
\begin_layout Itemize
The format of the message is the same as the LS to CDAS messages.
\end_layout

\begin_layout Description
NOTE See Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Messages-from-CDAS"

\end_inset

 for the list of defined message IDs.
\end_layout

\begin_layout Subsection
Communications LSC to Local Radio
\end_layout

\begin_layout Subsubsection
CanBus
\end_layout

\begin_layout Subsection
Startup operations
\end_layout

\begin_layout Subsubsection
PowerOn/Reboot
\end_layout

\begin_layout Standard
On PowerOn or Reboot, after having setup the Linux and Xenomai stuff, the
 following operations are performed
\end_layout

\begin_layout Enumerate
Load the FPGA firmware (including Canbus transceiver sja1000, the time tagging
 firmware and the trigger firmware).
\end_layout

\begin_layout Enumerate
Load the canbus driver lincan.
\end_layout

\begin_layout Enumerate
Set Interrupts levels and priorities for 1PPS, /EVTCLKF and /EVTCLKS.
\end_layout

\begin_layout Enumerate
Initialize the ramdisk /ram0 (8 MBytes).
 Note that by default, services and acquisition use the ramdisk to read
 configuration files and write log files.
\end_layout

\begin_layout Enumerate
Copy the configuration files from /root/LSC/config to /ram0.
\end_layout

\begin_layout Enumerate
Launch the services.
\end_layout

\begin_deeper
\begin_layout Enumerate
The msgsvr send the frame 
\begin_inset Quotes eld
\end_inset

Power Status
\begin_inset Quotes erd
\end_inset

 to the radio.
\end_layout

\end_deeper
\begin_layout Enumerate
Once the GPS receiver is OK (TRAIM solution good), the message server
\end_layout

\begin_deeper
\begin_layout Enumerate
Send to radio
\end_layout

\begin_deeper
\begin_layout Itemize
1PPS status frame (OK)
\end_layout

\begin_layout Itemize
Date/time
\end_layout

\begin_layout Itemize
Position
\end_layout

\end_deeper
\begin_layout Enumerate
Launches the acquisition itself.
 
\begin_inset Newline newline
\end_inset

Note that the acquisition is started only when the GPS is OK.
\begin_inset Newline newline
\end_inset

Note that at this point the triggering is 
\series bold
NOT started
\series default
, but monitoring data are sent (by default every 5 minutes).
\end_layout

\end_deeper
\begin_layout Standard
This is the end of the startup operations, the LSC is ready to handle triggers,
 send T2, monitoring data, etc.
\end_layout

\begin_layout Standard
The reboot takes about 1.5 minutes.
 In principle one should not have to reboot frequently the LSC (as it is
 the case in AS).
 The acquisition can be stopped/started independently of the services (see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:das:-Start/stop/status"

\end_inset

).
\end_layout

\begin_layout Standard
If for some reason, the services must be restarted (because a new version
 has been downloaded) no need to reboot the LSC; the utility program 
\series bold
srv
\series default
 can be used for that (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Srv"

\end_inset

).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Services-Software"

\end_inset

Services Software
\end_layout

\begin_layout Subsection
Services Tasks
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Message-Server-(msgsvr)"

\end_inset

Message Server (msgsvr)
\end_layout

\begin_layout Standard
The Message Server is the heart of the communications between processes
 and Comms.
 Messages sent from a process to CDAS are passed to the msgsvr.
 The message server stores the messages, when awakened by the 1PPS signal
 (every second) concatenates the stored messages into a frame and sends
 the frame to the radio.
 Messages have a priority, HIGH, MEDIUM, LOW.
 Concatenation into frames is made in the order of the priorities.
\end_layout

\begin_layout Standard
In the same way, frames from CDAS are received by the msgsvr.
 The frame is split into messages, and the messages are passed to the recipient
 process.
 In order to receive messages from CDAS, a process must be registered to
 the msgsvr, indicating which ID(s) of messages it should receive (see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:MsgSvrClientLib"

\end_inset

).
 Note that several processes can receive the same message IDs.
 Some message IDs are handled directly by the msgsvr:
\end_layout

\begin_layout Itemize
M_REBOOT: Reboot the LSC.
 The msgsvr performs the following actions
\end_layout

\begin_deeper
\begin_layout Itemize
Send a POWER_STATUS frame to Local Radio, with data[1] = 0 (Failure Imminent.
 Some other code could/should be used for 
\begin_inset Quotes eld
\end_inset

Reboot Imminent
\begin_inset Quotes erd
\end_inset

 ?)
\end_layout

\begin_layout Itemize
Stop the acquisition
\end_layout

\begin_layout Itemize
Save the log files to /scr/log/yyyymmdd-hhmmss directory.
\end_layout

\begin_layout Itemize
Reboot the LSC
\end_layout

\end_deeper
\begin_layout Itemize
M_CONFIG_TO_FLASH: Save the configuration files (
\series bold
SvrConfig.cfg, GpsConfig.cfg, AcqConfig.cfg
\series default
) to 
\series bold
/root/LSC/config
\series default
.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:GPS-Control-(gpsctrl)"

\end_inset

GPS Control (gpsctrl)
\end_layout

\begin_layout Standard
Gpsctrl handles all the operations of the GPS Receiver.
 At startup, the position (as set in the GpsConfig.cfg file) is loaded into
 the GPS Receiver, the hold position is set according to the configuration
 file (note that Hold mode should be the default for the M12M Timing Receiver.
 This means also that the position of each station should be known with
 a reasonnable accuracy).
 Gpsctrl reads the messages sent by the GPS Receiver; when the TRAIM solution
 becomes good, ppsirq is launched and the msgsvr is signaled.
 If/when the TRAIM Solution becomes BAD, the msgsvr is also signaled (and
 in turn informs the radio).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:1PPS-Interrupts-(ppsirq)"

\end_inset

1PPS Interrupts (ppsirq)
\end_layout

\begin_layout Standard
Ppsirq is in charge of the reception of the 1PPS Interrupts, keeps the time
 and signals the processes that need that information.
 Processes willing to receive 1PPS signals should register to 
\series bold
ppsirq
\series default
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PpsClientLib"

\end_inset

); 
\series bold
ppsirq
\series default
 is launched by 
\series bold
gpsctrl
\series default
 when the GPS Receiver TRAIM Status becomes OK.
\end_layout

\begin_layout Subsubsection
Remote Shell Command Execution (shellcmd)
\end_layout

\begin_layout Standard
Shellcmd executes the command passed in the message and returns the exit
 code of the command.
\end_layout

\begin_layout Subsubsection
Upload
\end_layout

\begin_layout Standard
Handles file transfer from LSC to CDAS
\end_layout

\begin_layout Subsubsection
Download
\end_layout

\begin_layout Standard
Handle file transfer from CDAS to LSC.
\end_layout

\begin_layout Subsubsection
Tank Power Control (tpcb)
\end_layout

\begin_layout Standard
Tpcb receives Canbus frames issued by the TPCB and stores the information
 into a shared memory.
 The TPCB sends its data every minute.
\end_layout

\begin_layout Subsection
Services Utilities
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Srv"

\end_inset

Srv
\end_layout

\begin_layout Standard

\series bold
srv
\series default
 is used to (re)start, stop services and acquisition.
 It can also give the status of the services.
 The services are launched at boot time in the 
\series bold
/etc/rc.local
\series default
 script.
\end_layout

\begin_layout Description
Usage 
\family typewriter
srv [<options>] <action>
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-v
\family default
 : Verbose mode.
\end_layout

\begin_layout Itemize

\family typewriter
--boo
\family default
t: Used to indicate that it is started just after a poweron/reset.
\end_layout

\begin_layout Itemize

\family typewriter
--pld: 
\family default
Reload the FPGA firmware and the canbus driver before (re)Start.
\end_layout

\begin_layout Itemize

\family typewriter
--dir=<path>
\family default
: Use <path> as the working directory (default is the ramdisk 
\series bold
/ram0
\series default
).
\end_layout

\begin_layout Itemize

\family typewriter
--bin=<path>
\family default
: Use <path> as the executable directory (default '
\series bold
/root/LSC/bin
\series default
').
\end_layout

\begin_layout Itemize

\family typewriter
--test
\family default
: Use '
\series bold
/root/LSC_TEST/bin
\series default
' as executable directory.
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
: Prints the current version.
\end_layout

\begin_layout Description
Actions
\end_layout

\begin_layout Itemize

\family typewriter
start
\family default
: Launches all the services tasks.
\end_layout

\begin_layout Itemize

\family typewriter
restart
\family default
: Stop then start all the services and acquisition tasks.
 Usefull from CDAS (via a remote shell command).
\end_layout

\begin_layout Itemize

\family typewriter
stop
\family default
: kill gracefully the services and acquisition tasks.
\end_layout

\begin_deeper
\begin_layout Itemize
NOTE: if the services are stopped, they cannot be re-started from CDAS !
 From CDAS avoid 
\series bold
stop
\series default
, use 
\series bold
restart
\series default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
kill
\family default
: kill 
\begin_inset Quotes eld
\end_inset

brute force
\begin_inset Quotes erd
\end_inset

 all the services and acquisition tasks.
\end_layout

\begin_deeper
\begin_layout Itemize
NOTE: as with the 
\family typewriter
stop
\family default
 action, a 
\family typewriter
kill
\family default
 cannot be recovered from CDAS.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
halt
\family default
: kill services, acquisition tasks and halt the system before a power-off.
\end_layout

\begin_deeper
\begin_layout Itemize
NOTE: this action is 
\series bold
mandatory
\series default
 before powering off the system (that's Linux).
\end_layout

\begin_layout Itemize
NOTE: as with the 
\family typewriter
stop
\family default
 action, a 
\family typewriter
halt
\family default
 cannot be recovered from CDAS.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
rmq
\family default
: removes all the message queues (in case '
\family typewriter
srv stop
\family default
' failed to do the job).
\end_layout

\begin_layout Itemize

\family typewriter
status
\family default
: check that all service tasks are running.
 The return code contains the number of tasks that should be running but
 are not (ie are dead for some reason).
 Normal status is 0.
\end_layout

\begin_layout Paragraph
Gps issues
\end_layout

\begin_layout Standard
If, for some reason, the GPS receiver does not get ready, the ppsirq process
 does not start.
 It is possible to force the GPS to look ready by sending the command:
\end_layout

\begin_layout Standard

\family typewriter
stop -4001 gpsctrl
\end_layout

\begin_layout Subsubsection
BuildConfig
\begin_inset CommandInset label
LatexCommand label
name "sub:BuildConfig"

\end_inset


\end_layout

\begin_layout Standard
Buildconfig creates or modify the 2 files 
\series bold
SvrConfig.cfg
\series default
 and 
\series bold
GpsConfig.
\series default
cfg.
 The structures are described in Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:svrconfig"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:GpsConfig"

\end_inset

.
\end_layout

\begin_layout Description
Usage buildconfig [<opt> [<opt>] ...
 ]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
--lsid=<id>
\family default
 : Set LSID
\end_layout

\begin_layout Itemize

\family typewriter
--loc=<where>
\family default
 : Set the location.
 Possible locations are read from the configuration file 
\series bold
locations.cfg
\series default
 (see Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Locations.cfg"

\end_inset

).
\end_layout

\begin_layout Itemize

\family typewriter
--lat=<mas>
\family default
 : Latitude in MAS
\end_layout

\begin_layout Itemize

\family typewriter
--lon=<mas>
\family default
 : Longitude in MAS
\end_layout

\begin_layout Itemize

\family typewriter
--dlat=<deg>
\family default
 : Latitude in Decimal Degrees
\end_layout

\begin_layout Itemize

\family typewriter
--dlon=<deg>
\family default
 : Longitude in Decimal Degrees
\end_layout

\begin_layout Itemize

\family typewriter
--north=<cm>
\family default
 : Northing (in cm)
\end_layout

\begin_layout Itemize

\family typewriter
--east=<cm>
\family default
 : Easting (in cm)
\end_layout

\begin_layout Itemize

\family typewriter
--zone=<str>
\family default
 : UTM Zone (3 characters)
\end_layout

\begin_layout Itemize

\family typewriter
--alt=<mas>
\family default
 : Altitude in centimetres
\end_layout

\begin_layout Itemize

\family typewriter
--hold=<0|1>
\family default
 : Hold Position ( 0 = False, 1 = True)
\end_layout

\begin_layout Itemize

\family typewriter
--off=<nanos>
\family default
 : Gps Offset in nanos (default 0)
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
 : Print the version.
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see now
\end_layout

\begin_layout Subsubsection
Saveconfig
\end_layout

\begin_layout Standard
Saveconfig is a shell script that copies the configuration files AcqConfig.dat,
 GpsConfig.dat and SvrConfig.dat from the ram disk /ram0 into /home/user/LSC/confi
g.
\end_layout

\begin_layout Standard
Saveconfig is invoked either directly or by sending the signal SIG_SAVE_CONFIG
 to msgsvt or by sending the message type M_CONFIG_TO_FLASH.
\end_layout

\begin_layout Subsubsection
Svrstatus
\end_layout

\begin_layout Standard
Status and statistics of the message server (msgsvr).
\end_layout

\begin_layout Subsubsection
Gpsstatus
\end_layout

\begin_layout Description
Usage gpsstatus [<options>]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-g : Prints the GPS time and GPS to UTC offset.
\end_layout

\begin_layout Itemize

\family typewriter
-s
\family default
 : Small Status.
\end_layout

\begin_layout Itemize

\family typewriter
-f
\family default
 : Full Status.
\end_layout

\begin_layout Itemize

\family typewriter
-F
\family default
 : Super Full Status (including the sawtooth).
\end_layout

\begin_layout Itemize
-p <sec> : Periodic repeat (in seconds).
 Default is single shot.
\end_layout

\begin_layout Subsubsection
Tpcbstatus
\end_layout

\begin_layout Description
Usage tpcbstatus [<opt> [<opt>] ...]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
--wait
\family default
 : Wait till valid data are available
\end_layout

\begin_layout Itemize

\family typewriter
--loop
\family default
 : Infinite loop
\end_layout

\begin_layout Itemize

\family typewriter
--save=<path>
\family default
 : Save data to <path>
\end_layout

\begin_layout Itemize

\family typewriter
--ascii
\family default
 : Save in ASCII (default is BINARY)
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
 : Print the version.
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see now
\end_layout

\begin_layout Subsubsection
Stop
\end_layout

\begin_layout Standard
Stop sends a 
\begin_inset Quotes eld
\end_inset

signal
\begin_inset Quotes erd
\end_inset

 to some processes.
 Note that these are not actually linux signals (in the usual linux meaning)
 but are specific messages, sent to the message queue of the process, that
 simulate the OS9 signals.
 A signal is just a 32 bits integer, the action taken by the process is
 process dependent; however some signal values are of general interest (see
 Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:List-of-signals"

\end_inset

for the list and meaning of signals).
\end_layout

\begin_layout Standard

\family typewriter
stop -<signal> <process> \SpecialChar \ldots{}
 <process>
\end_layout

\begin_layout Description
Example 
\family typewriter
stop -4001 gpsctrl
\family default
 : forces gpsctrl to look ready even if no GPS antenna or no satellites
 are visible/tracked.
\end_layout

\begin_layout Description
Example 
\family typewriter
stop -12345 control
\family default
 : starts triggering.
\end_layout

\begin_layout Subsubsection
GenMsg
\end_layout

\begin_layout Standard
Send a message or a - small - file as a generic message (ie an ASCII string)
 to CDAS.
 The file should be small, although there is no hard coded limit to the
 file size.
 Genmsg can be issued by CDAS as a remote shell command.
\end_layout

\begin_layout Standard

\family typewriter
genmsg --file=<path>
\end_layout

\begin_layout Standard

\family typewriter
genmsg --msg=<string>
\end_layout

\begin_layout Quote
Example1 (shell command from CDAS): 
\family typewriter
ipcs >ipcs.txt ; genmsg --file=ipcs.txt
\end_layout

\begin_layout Quote
Example2: 
\family typewriter
genmsg --msg=
\begin_inset Quotes erd
\end_inset

`srv status -v`
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
Example3: 
\family typewriter
genmsg --msg=
\begin_inset Quotes erd
\end_inset

`tpcbstatus -v`
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote
Example4: 
\family typewriter
genmsg --msg=
\begin_inset Quotes erd
\end_inset

(grep W t1read.log | wc)
\begin_inset Quotes erd
\end_inset


\family default
 <--- Count the number of warnings in a log file.
 Note the parenthesis.
\end_layout

\begin_layout Subsubsection
sigauger
\end_layout

\begin_layout Standard
Lists the signals that are known and handled by different tasks (see Appendix
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:List-of-signals"

\end_inset

for the list and meaning of signals).
\end_layout

\begin_layout Subsection
Test Utilities
\end_layout

\begin_layout Standard
A global test named lstest can be used to check that there is no problem
 with the LSC.
 lstest is a shell script, using the various test programs described below.
\end_layout

\begin_layout Subsubsection
ADC (ttadc)
\end_layout

\begin_layout Description
Usage 
\family typewriter
ttadc [options]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-n, --loop=<n>
\family default
 : Reads <n> times and makes averages
\end_layout

\begin_layout Itemize

\family typewriter
-o, --out=<path>
\family default
 : Output File.
\end_layout

\begin_layout Itemize

\family typewriter
--tmout=<usec>
\family default
 : Set conversion timeout at <usec> micros
\end_layout

\begin_layout Itemize

\family typewriter
--reset=<y/n>
\family default
 : Set/Unset reset ADC at each read
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose.
\end_layout

\begin_layout Itemize

\family typewriter
-t
\family default
 : Print the time.
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see.
\end_layout

\begin_layout Subsubsection
DAC (ttdac)
\end_layout

\begin_layout Description
Usage ttdac [options]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-c, --chan=<n>
\family default
 : Dac channel (0 to 3).
 By default set all.
\end_layout

\begin_layout Itemize

\family typewriter
-V, --volt=<vv>
\family default
 : Voltage (0.
 to 2.5).
\end_layout

\begin_layout Itemize

\family typewriter
-d, --ddu=<dd>
\family default
 : Dac Units (0 to 4095).
\end_layout

\begin_layout Itemize

\family typewriter
-z, --zero
\family default
 : Set 0 volts when finished.
\end_layout

\begin_layout Itemize

\family typewriter
-v --verbose
\family default
 : Verbose.
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see.
\end_layout

\begin_layout Subsubsection
Time Tagging (tt_ttag)
\end_layout

\begin_layout Description
Usage tt_ttag [<options>]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-n --count
\family default
 : Number of seconds (default infinite)
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose.
 Print data.
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see now.
\end_layout

\begin_layout Subsubsection
1PPS (ttpps)
\end_layout

\begin_layout Description
Usage ttpps [<options>]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-z, --reset
\family default
 : Reset the TTAG before any other operation.
\end_layout

\begin_layout Itemize

\family typewriter
-o, --out=<path>
\family default
 : Output written to <path>.
 Default stdout
\end_layout

\begin_layout Itemize

\family typewriter
-n, --nirq=<nn>
\family default
 : Number or 1PPS IRQ.
 Default infinite, stop with CTRL-C
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose
\end_layout

\begin_layout Subsubsection
Tpcb (tt_tpcb)
\end_layout

\begin_layout Subsubsection
GPS Receiver (gpstest)
\end_layout

\begin_layout Subsubsection
Front End
\end_layout

\begin_layout Subsection
Libraries
\end_layout

\begin_layout Subsubsection
ShmLib
\begin_inset CommandInset label
LatexCommand label
name "sub:ShmLib"

\end_inset


\end_layout

\begin_layout Itemize
int ShmBind( char * name, int size, int * shmid )
\end_layout

\begin_layout Itemize
void * ShmAttach( char * name, int size, int * shmid )
\end_layout

\begin_layout Itemize
int ShmDetach( void * mem )
\end_layout

\begin_layout Itemize
void ShmRemove( void * mem, int shmid )
\end_layout

\begin_layout Subsubsection
SemLib
\begin_inset CommandInset label
LatexCommand label
name "sub:SemLib"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int SemLink( char * name, unsigned int * key ) ;
\end_layout

\begin_layout Plain Layout

int SemAttach( char * name, unsigned int * key ) ;
\end_layout

\begin_layout Plain Layout

int SemDetach( int the_id ) ;
\end_layout

\begin_layout Plain Layout

int SemP( int the_id ) ;
\end_layout

\begin_layout Plain Layout

int SemV( int the_id ) ;
\end_layout

\begin_layout Plain Layout

int SemSet( int the_id, unsigned int value ) ;
\end_layout

\begin_layout Plain Layout

int SemStatus( int the_id, struct semid_ds * status ) ;
\end_layout

\begin_layout Plain Layout

int SemValue( int the_id, int * value ) ;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
MsgQueueLib
\begin_inset CommandInset label
LatexCommand label
name "sub:MsgQueueLib"

\end_inset


\end_layout

\begin_layout Itemize
unsigned int IpcMsgCreate( const char * name, unsigned int * key )
\end_layout

\begin_layout Itemize
unsigned int IpcMsgBind( const char * name, unsigned int * key )
\end_layout

\begin_layout Itemize
int IpcMsgRemove( int msgid )
\end_layout

\begin_layout Itemize
unsigned int IpcMsgCheck( int msqid )
\end_layout

\begin_layout Subsubsection
MsgSvrClientLib
\begin_inset CommandInset label
LatexCommand label
name "sub:MsgSvrClientLib"

\end_inset


\end_layout

\begin_layout Itemize
unsigned int MsgSvrClientOpen( char * qname, int nb_id, unsigned char *
 msg_id )
\end_layout

\begin_deeper
\begin_layout Itemize
Arguments
\end_layout

\begin_deeper
\begin_layout Itemize
qname: the name of the queue of the client, actually the process name.
 Messages sent by the msgsvr are sent to this queue.
\end_layout

\begin_layout Itemize
nb_id: number of CDAS message IDs expected by this client.
\end_layout

\begin_layout Itemize
msg_id: array of CDAS message IDs.
 Upon reception, by the msgsvr, of messages from CDAS, only the messages
 with the relevant IDs are passed to the client.
\end_layout

\end_deeper
\begin_layout Itemize
Return
\end_layout

\begin_deeper
\begin_layout Itemize
the ID of the msgsvr queue, or -1 in case of error.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
int MsgSvrClientClose( char * qname, unsigned int mqueueid )
\end_layout

\begin_deeper
\begin_layout Itemize
Arguments
\end_layout

\begin_deeper
\begin_layout Itemize
qname: the name of the queue of the client.
\end_layout

\begin_layout Itemize
mqueueid: the queue id of the msgsvr (given by MsgSvrClientOpen)
\end_layout

\end_deeper
\begin_layout Itemize
Return
\end_layout

\begin_deeper
\begin_layout Itemize
0 if OK, an error code otherwise.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
int MsgSvrClientSend( int queuid, int priority, void * buf, int size): 
\end_layout

\begin_deeper
\begin_layout Itemize
Usage: Send a message to the msgsvr for the CDAS.
\end_layout

\begin_layout Itemize
Arguments:
\end_layout

\begin_deeper
\begin_layout Itemize
queuid: the queue id of the msgsvr (given by MsgSvrClientOpen)
\end_layout

\begin_layout Itemize
priority: one of HIGH_PRIORITY, MEDIUM_PRIORITY, LOW_PRIORITY.
\end_layout

\begin_layout Itemize
buf: pointer to the message.
 The message must have the following format:
\end_layout

\begin_deeper
\begin_layout Itemize
Type: one 32 bits integer with the CDAS message type.
\end_layout

\begin_layout Itemize
The content of the message.
 The format of this part is message dependent.
\end_layout

\end_deeper
\begin_layout Itemize
size: overall size of the message.
\end_layout

\end_deeper
\begin_layout Itemize
Return
\end_layout

\begin_deeper
\begin_layout Itemize
0 if OK, -1 otherwise and errno contains the error number.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
int MsgSvrClienSignal( char * task_name, int signal) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Usage: Send a 'signal' to a given Auger task.
\end_layout

\begin_layout Itemize
Arguments
\end_layout

\begin_deeper
\begin_layout Itemize
task_name: the name of the task.
\end_layout

\begin_layout Itemize
signal: the signal number
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The list of recognized signals is available at Appendix 
\series bold

\begin_inset CommandInset ref
LatexCommand ref
reference "sub:List-of-signals"

\end_inset


\series default
.
\end_layout

\begin_layout Subsubsection
PpsClientLib
\begin_inset CommandInset label
LatexCommand label
name "sub:PpsClientLib"

\end_inset


\end_layout

\begin_layout Standard
Any process wishing to reveive the 1PPS information should register to the
 ppsirq process.
 Upon detection of a 1PPS by ppsirq, ppsirq sends a 
\begin_inset Quotes eld
\end_inset

signal
\begin_inset Quotes erd
\end_inset

 to the client's queue.
 The signal number is PPS_SIGNAL_READY (see sigauger.h).
\end_layout

\begin_layout Itemize
int PpsClientRegister( char * my_queue )
\end_layout

\begin_deeper
\begin_layout Itemize
Arguments
\end_layout

\begin_deeper
\begin_layout Itemize
my_queue: the name of the queue of the client, actually the process name.
 At each 1PPS signal, a message is sent by ppsirq to this queue.
\end_layout

\end_deeper
\begin_layout Itemize
Return
\end_layout

\begin_deeper
\begin_layout Itemize
0 if OK, -1 otherwise and errno contains the error number.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
TtagLib
\begin_inset CommandInset label
LatexCommand label
name "sub:TtagLib"

\end_inset


\end_layout

\begin_layout Itemize
int TtagOpen()
\end_layout

\begin_layout Itemize
int TtagClose()
\end_layout

\begin_layout Itemize
int TtagGetVersion()
\end_layout

\begin_layout Itemize
int TtagGetId()
\end_layout

\begin_layout Itemize
int TtagGetFast( TIME_STAMP * date ) ; 
\end_layout

\begin_deeper
\begin_layout Itemize
Reads the /EVTCLKF timestamps (two timestamps, leading and trailing edges
 used to comote the deadtime).
\end_layout

\end_deeper
\begin_layout Itemize
int TtagGetSlow( ONE_TIME * date ) ; 
\end_layout

\begin_deeper
\begin_layout Itemize
Reads the /EVTCLKS timestamp.
 In this case only one timestamp.
\end_layout

\end_deeper
\begin_layout Itemize
unsigned int TtagGetCalib()
\end_layout

\begin_layout Itemize
unsigned int TtagGet100MHz()
\end_layout

\begin_layout Itemize
unsigned int TtagGetSecond()
\end_layout

\begin_layout Itemize
void TtagReset() ; 
\end_layout

\begin_layout Subsubsection
CanLib
\end_layout

\begin_layout Itemize
int CanlibVersionNb()
\end_layout

\begin_layout Itemize
char * CanlibVersion()
\end_layout

\begin_layout Itemize
int CanlibSendDataMsg( int first_id, unsigned char * msg, int length )
\end_layout

\begin_layout Itemize
int CanlibSendRadioMsg( unsigned char * msg, int length )
\end_layout

\begin_layout Itemize
int CanlibGetDataMsg( CANBUS_FRAME * frame)
\end_layout

\begin_layout Itemize
int CanlibPassToCanDriver( CANBUS_FRAME * frame, int dbg_flag)
\end_layout

\begin_layout Itemize
int CanlibOpen()
\end_layout

\begin_layout Itemize
int CanlibClose()
\end_layout

\begin_layout Subsubsection
LogfileLib
\end_layout

\begin_layout Itemize
void LogSetProgName( const char *name)
\end_layout

\begin_layout Itemize
void LogInitTime(unsigned int *temps)
\end_layout

\begin_layout Itemize
void LogSetFileName( const char *fname)
\end_layout

\begin_layout Itemize
void LogSetNewFile( const char *fname)
\end_layout

\begin_layout Itemize
int LogPrt( const char *str, int we, const char * fun )
\end_layout

\begin_layout Itemize
FILE *LogOpen(void)
\end_layout

\begin_layout Itemize
void LogClose(void)
\end_layout

\begin_layout Itemize
int LogDebug( const char * fun, int we, const char * fromat, ...
 )
\end_layout

\begin_layout Itemize
int LogPrint(int we, const char *format, ...)
\end_layout

\begin_layout Itemize
int LogPrintTimed(int we, const char *format, ...)
\end_layout

\begin_layout Itemize
int LogPrintDate(int we, const char *format, ...)
\end_layout

\begin_layout Itemize
int LogPrintSysDate(int we, const char *format, ...);
\end_layout

\begin_layout Subsubsection
LinkLib
\begin_inset CommandInset label
LatexCommand label
name "sub:LinkLib"

\end_inset


\end_layout

\begin_layout Standard
Generic loibrary to handle linked list of any kind of item.
\end_layout

\begin_layout Itemize
void * LinkCreate( int size )
\end_layout

\begin_layout Itemize
int LinkDelete( void *old )
\end_layout

\begin_layout Itemize
int LinkSwap( void *one, void *two )
\end_layout

\begin_layout Itemize
void * LinkNext( void *one )
\end_layout

\begin_layout Itemize
void * LinkPrev( void *one )
\end_layout

\begin_layout Itemize
void * LinkAddHead( void *new, void **head, void **tail )
\end_layout

\begin_layout Itemize
void * LinkAddTail( void *new, void **head, void **tail )
\end_layout

\begin_layout Itemize
void * LinkAfter( void *new, void *old )
\end_layout

\begin_layout Itemize
void * LinkBefore( void *new, void *old )
\end_layout

\begin_layout Itemize
void * LinkUnlink( void *old )
\end_layout

\begin_layout Itemize
void * LinkFind( void *first, void *last, int (*func)() ) ; 
\end_layout

\begin_layout Subsubsection
SlowLib
\end_layout

\begin_layout Subsubsection
GpsUtilLib
\end_layout

\begin_layout Itemize
unsigned char * short_to_bytes(unsigned char *pb, unsigned short val ) ;
\end_layout

\begin_layout Itemize
short bytes_to_short( unsigned char * pb ) ;
\end_layout

\begin_layout Itemize
unsigned char * int_to_bytes( unsigned char *pb, unsigned int val ) ;
\end_layout

\begin_layout Itemize
unsigned char * int_to_3bytes( unsigned char *pb, unsigned int val ) ;
\end_layout

\begin_layout Itemize
unsigned char * int_to_2bytes( unsigned char *pb, unsigned int val ) ;
\end_layout

\begin_layout Itemize
int bytes_to_int( unsigned char *pb ) ;
\end_layout

\begin_layout Itemize
int bytes3_to_int( unsigned char * pb) ;
\end_layout

\begin_layout Itemize
long dswab( char *from ) ;
\end_layout

\begin_layout Itemize
double mas_to_deg( int mas ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Convert MAS (MillArcSecond) to decimal degres.
\end_layout

\end_deeper
\begin_layout Itemize
int deg_to_mas( double deg ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Convert decimal degres to MAS (MilliArcSecond)
\end_layout

\end_deeper
\begin_layout Itemize
unsigned int gps_seconds( int yy, int mm, int dd, int hh, int mn, int ss
 ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Computes GPS seconds from GPS receiver date.
\end_layout

\end_deeper
\begin_layout Itemize
char * Gps2Utc( unsigned int gps, unsigned int offset ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Returns the UTC time (computed from the GPS time and GPS/UTC offset) as
 a string like 'YYYY/MM/DD hh:mm:ss'
\end_layout

\end_deeper
\begin_layout Itemize
unsigned int Gps2UtcTime( unsigned int gps, unsigned int offset ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Returns the UTC time in second (linux standard)
\end_layout

\end_deeper
\begin_layout Itemize
char * Gps2Fname( unsigned int gps, unsigned int offset ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Returns a string 'YYYYMMDD_hhmmss' representing UTC time (usable as a file
 name)
\end_layout

\end_deeper
\begin_layout Itemize
char * UtcDateStr( time_t * utc ) ;
\end_layout

\begin_deeper
\begin_layout Itemize
Return a string like 'YYYY/MM/DD hh:mm:ss'
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Acquisition Software
\end_layout

\begin_layout Subsection
Acquisition tasks
\begin_inset CommandInset label
LatexCommand label
name "sec:Acquisition"

\end_inset


\end_layout

\begin_layout Subsubsection
Control
\end_layout

\begin_layout Standard
Contrary to Auger South software, control has a minor role.
 It is only used to
\end_layout

\begin_layout Itemize
Initialize all shared memory modules,
\end_layout

\begin_layout Itemize
Check that all the acquisition processes are still alive.
\end_layout

\begin_layout Itemize
Starts/Stop the triggering.
 To be compatible with Auger South, start/stop triggering is made with:
\end_layout

\begin_deeper
\begin_layout Itemize
Start Triggering: 
\family typewriter
stop -12345 control
\end_layout

\begin_layout Itemize
Stop Triggering: 
\family typewriter
stop -12346 control
\end_layout

\end_deeper
\begin_layout Standard
Control propagates the triggering state to the other tasks involved.
\end_layout

\begin_layout Standard
Starting and stopping the whole acquisition is now devoted to the utility
 
\begin_inset Quotes eld
\end_inset


\series bold
das
\series default

\begin_inset Quotes erd
\end_inset

 (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:das:-Start/stop/status"

\end_inset

)
\end_layout

\begin_layout Subsubsection
T1irq
\end_layout

\begin_layout Standard
T1irq is a Xenomai RT task that handles the /EVTCLKF Interrupts.
 Upon reception of an interrupt 
\series bold
t1irq
\series default
 increments the RT Semaphore 'FastIrqSem' (rt_sem_v).
\end_layout

\begin_layout Subsubsection
T1read
\end_layout

\begin_layout Standard
T1read is a Xenomai RT tasks.
 It waits on the RT semaphore 'FastIrqSem' (rt_sem_p), reads the event and
 the timestamp into the FastBuffer and increments the Linux semaphore 'FastReady
Sem' (SemV).
\end_layout

\begin_layout Subsubsection
T1fake
\end_layout

\begin_layout Standard
T1fake generates fake T1's (/EVTCLKF).
 Used when there is no Front End board.
 A software Trigger is generated at ~ 100 Hz and catched by 
\series bold
t1irq
\series default
 just like any normal T1.
\end_layout

\begin_layout Subsubsection
Muirq
\end_layout

\begin_layout Standard
Muirq plays the same role as t1irq for the muon (/EVTCLKS) interrupts.
 Muirq is a Xenomai RT task that handles the /EVTCLKS Interrupts.
 Upon reception of an interrupt 
\series bold
Muirq
\series default
 signals the RT Semaphore 'SlowIrqSem' (rt_sem_v).
\end_layout

\begin_layout Subsubsection
Muread
\end_layout

\begin_layout Standard
Muread is a Xenomai RT tasks.
 It waits on the RT semaphore 'SlowIrqSem' (rt_sem_p), reads the event and
 the timestamp into the SlowBuffer and increments the Linux semaphore 'SlowReady
Sem' (SemV).
\end_layout

\begin_layout Subsubsection
Mufill
\end_layout

\begin_layout Standard
Mufill waits on the Linux semaphore 'SlowReadySem' (SemP), moves the event
 from the SlowBuffer into the MuonBuffer.
 Mufill performs the calibration processing (NOT IMPLEMENTED YET)
\end_layout

\begin_layout Subsubsection
Mufake
\end_layout

\begin_layout Standard
Generates fake Muon triggers (/EVTCLKS)by mean of a
\color red
 'Slow Soft Trigger' in the FPGA Firmware.
 
\color black
This feature is implemented in the Courty firmware version
\color inherit
; it would be nice to have in the final trigger implementation.
 The /EVTCLKS Interrupt is catched by Muirq just like a normal /EVTCLKS.
\end_layout

\begin_layout Subsubsection
Grbread
\end_layout

\begin_layout Standard
Every second, reads the GRB Counters and store into the AcqStatus shared
 memeory.
\end_layout

\begin_layout Subsubsection
Trigger2
\end_layout

\begin_layout Standard
Trigger2 waits on the Linux semaphore 'FastReadySem' (SemP), moves the event
 from the FastBuffer into the EventBuffer, checks if it is a T2 (
\series bold
\color red
T2 algo are NOT IMPLEMENTED YET
\series default
\color inherit
), and builds the M_T2_YES message.
 Trigger2 is a client of 
\series bold
ppsirq (
\series default
see section
\series bold
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:1PPS-Interrupts-(ppsirq)"

\end_inset

)
\series default
 and every second sends the M_T2_YES message to CDAS.
\end_layout

\begin_layout Subsubsection
EvtSvr
\end_layout

\begin_layout Subsubsection
Monitor
\end_layout

\begin_layout Standard
Monitor reads the Slow control ADC values every N seconds (defined in AcqConfig.d
at), computes averages every M minutes (defined in AcqConfig.dat), and signals
 
\series bold
calmonsvr
\series default
 that it is time to send the monitoring block to CDAS.
 The TPCB data are also handled in the same way, except that the read period
 is 1 minute (hard coded in the TPCB firmware).
 In addition it stores minimum and maximum values of each channel; this
 is specially useful for the currents as it permits to check that there
 is no unexpected current peaks.
 See table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:ADC-AD7554-channels"

\end_inset

 for the assignement of the ADC channels and Appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Monitor-block-structure"

\end_inset

 for the description of the Monitoring Block.
\end_layout

\begin_layout Subsubsection
Calmonsvr
\end_layout

\begin_layout Standard
Calmonsvr sends the latest monitoring block when signaled by 
\series bold
monitor
\series default
 or by a request from CDAS (message ID; M_MONIT_REQ).
\end_layout

\begin_layout Description
NOTE 
\series bold
\shape italic
\color red
The format of the monitoring block is not the same as in Auger South
\end_layout

\begin_layout Subsection
Acquisition Utilities
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:das:-Start/stop/status"

\end_inset

Das
\end_layout

\begin_layout Standard
The Das utility is used to start, stop or get the status of the acquisition
 processes.
\end_layout

\begin_layout Description
Usage 
\family typewriter
das [<options>] <action>
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
-v
\family default
 : Verbose mode.
\end_layout

\begin_layout Itemize

\family typewriter
--dir=<path>
\family default
: Use <path> as working directory (where the logfiles are written)/
\end_layout

\begin_layout Itemize

\family typewriter
--bin=<path>
\family default
: Use <path> as the executable directory (default '
\series bold
/root/LSC/bin
\series default
').
\end_layout

\begin_layout Itemize

\family typewriter
--test
\family default
: Use '
\series bold
/root/LSC_TEST/bin
\series default
' as executable directory.
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
: Prints the current version/
\end_layout

\begin_layout Description
Actions
\end_layout

\begin_layout Itemize

\family typewriter
start
\family default
: Launches all the acquisition tasks.
\end_layout

\begin_layout Itemize

\family typewriter
restart
\family default
: Stop then start all the acquisition tasks.
 Usefull from CDAS (via a remote shell command)
\end_layout

\begin_layout Itemize

\family typewriter
stop
\family default
: kill gracefully all the acquisition tasks and make sure that message queues
 are all removed.
\end_layout

\begin_layout Itemize

\family typewriter
kill
\family default
: kill 
\begin_inset Quotes eld
\end_inset

brute force
\begin_inset Quotes erd
\end_inset

 all the acquisition tasks.
\end_layout

\begin_layout Itemize

\family typewriter
rmq
\family default
: removes all the message queues (in case '
\family typewriter
das stop
\family default
' failed to do the job).
\end_layout

\begin_layout Itemize

\family typewriter
status
\family default
: check that all das tasks are running.
 The return code contains the number of tasks that should be running but
 are not (ie are dead for some reason).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Gocalib"

\end_inset

Gocalib
\end_layout

\begin_layout Standard
Calibrate the PMT: search the value for the High Voltage to have a T1 rate
 at 100 Hz.
 The T1 rate is caculated by 
\series bold
getrate
\series default
.
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Getrate"

\end_inset

)
\end_layout

\begin_layout Standard
Note that gocalib does not write the threshold to the acquisition configuration
 file.
 And make sure that, if the muon trigger is enabled, the muon threshold
 is not too low, otherwise the system may be overflooded with muons IRQs.
\end_layout

\begin_layout Standard
Options: see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Gocalib-Options."

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Long option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vmin=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set minimum voltage at <volts> (default 500V)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vfirst=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set first search volts at <volts> (default 1000V)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vlast=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set last search voltage at <volts> (default 1500V)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--fast
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fast calib.
 getrate counts T1 on 4 seconds (default 8)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-V
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vem=<counts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use <counts> as VEM (default 50)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--write
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write the voltage, if foind, to the AcqConfig.cfg
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--Write
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Write the voltage, even if NOT found.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--test
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test mode.
 Use t1fake to generate Soft Triggers (default TotA)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print the version number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--help
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What you see.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--verbose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Increase verbosity
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Gocalib-Options."

\end_inset

Gocalib Options.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Getrate"

\end_inset

Getrate
\end_layout

\begin_layout Standard
Getrate counts the number of T1 events during a certain amount of time,
 and returns it as the exit code.
 As 
\series bold
getrate
\series default
 uses the /EVCLKF interrupts, the normal acquisition MUST be stopped.
 Getrate is used by 
\series bold
gocalib
\series default
.
\end_layout

\begin_layout Standard
Implemented, ok with gocalib in TEST mode.
\end_layout

\begin_layout Standard
Options: see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Getrate-Options"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Long Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--time=<sec>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Time in seconds (default 5)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--test
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test mode, use Soft triggers (default TotA)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print the version
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--verbose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Increase verbosity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--help
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What you see
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Getrate-Options"

\end_inset

Getrate Options
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Showersim
\end_layout

\begin_layout Standard
Generate at a given time a LED Flasher Event.
\end_layout

\begin_layout Standard
Options: see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Showersim-Options"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Long option
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--gps-<gps_time>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the date in GPS time.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--utc=<utc_time>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the date in UTC time (seconds since 1970).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--date=<utc_date>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the date as 
\begin_inset Quotes eld
\end_inset

YYYY/MM/DD hh:mm:ss
\begin_inset Quotes erd
\end_inset

 UTC.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vext-<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the Vext voltage (default 1V).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--a-base=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the LedA Base voltage (default 1V).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--a-dac=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the LedA Dac voltage (default 2 V).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--b-base=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the LedB Base voltage (default 1 V).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--b-dac=<volts>
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the LedB Dac voltage (default 2 V).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--vmax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Set the maximum possible voltage (about 11 Volts)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Print the version number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--verbose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Increase verbosity.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--help
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
What you see.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Showersim-Options"

\end_inset

Showersim Options
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Golin
\end_layout

\begin_layout Standard
Compute linearity with the LED Flasher.
 Golin first reads the configuration file 'golin.cfg'.
 the configuration file is an ascii file with one line (lines beginning
 with '#' are ignnored as comments) containing in this order:
\end_layout

\begin_layout Itemize
AreaBegin: the beginning of the sample index where the peak is searched.
 This value can be actually searched if the option '--auto' is set.
\end_layout

\begin_layout Itemize
BaseOffset: the relative index from where the base line is calculated.
 The actual sample index used is (AreaBegin-BaseOffset).
\end_layout

\begin_layout Itemize
SignalArea: the number of samples used to search the peak.
 The peak is searched from AreaBegin to (AreaBegin + SignalArea).
 Similarly, the base line is computed from (AreaBegin - BaseOffset) to (AreaBegi
n - BaseOffset + SignalArea)
\end_layout

\begin_layout Itemize
NbSteps: Number of steps with increasing Led voltages to calculate the linearity.
\end_layout

\begin_layout Itemize
NbShots: Number of events used at each stp.
\end_layout

\begin_layout Standard
Golin scans the Leds to find the minimum Base values (for each LED) to find
 a peak well above the base line and to find the maximum Vext value to get
 the saturation.
 Then the Led Dac voltages are increased at each step and the requested
 number of events are generated and read out.
 Once done, if everything went well, the linearity data ascii files 
\series bold
migoled.pk
\series default
 and 
\series bold
migoled.ch
\series default
 (for peak and charge respectively) are generated.
 The format of these file is the same, one line per step:
\end_layout

\begin_layout Itemize
LED A mean (peak or charge)
\end_layout

\begin_layout Itemize
LED A sigma( peak or charge)
\end_layout

\begin_layout Itemize
LED A+B mean (peak or charge)
\end_layout

\begin_layout Itemize
LED A+B sigma( peak or charge)
\end_layout

\begin_layout Itemize
LED B mean (peak or charge)
\end_layout

\begin_layout Itemize
LED B sigma (peak or charge)
\end_layout

\begin_layout Description
Options:
\end_layout

\begin_layout Itemize

\family typewriter
-c
\family default
 : Dont Create Linearity files (default YES to files '
\series bold
migoled.pk
\series default
' and '
\series bold
migoled.ch
\series default
')
\end_layout

\begin_layout Itemize

\family typewriter
-b
\family default
 : Create Ascii files for all shots with peak, charge, ...
 to file '
\series bold
golin.bin
\series default
'
\end_layout

\begin_layout Itemize

\family typewriter
-s
\family default
 : Set Saturation voltages, does not check saturation, just set VEXT at
 maximum (2.5V).
 Default is to search the saturation on Vext for each Led and use the maximum
 of the 2 values found.
\end_layout

\begin_layout Itemize

\family typewriter
--auto
\family default
 : Search the position of the peak automatically by setting VEXT and DACs
 to maximum (saturation).
 Overrids the peak position found in the configuration file.
\end_layout

\begin_layout Itemize

\family typewriter
--vext-ab
\family default
 : Search Vext maximum using Leds A+B.
 Default is A and B separately, the max of the 2 is taken.
\end_layout

\begin_layout Itemize

\family typewriter
--chan=<ch>
\family default
 : Search linearity of PMT channel 
\shape italic
<ch>
\shape default
.
 
\shape italic
<ch>
\shape default
 must be one of 
\series bold
a1
\series default
 (Anode), 
\series bold
a0.1
\series default
 (Anode x0.1), 
\series bold
a30
\series default
 (Anodex30), 
\series bold
d5
\series default
 (Dynode).
 Default is 
\series bold
a1
\series default
 (Anode).
\end_layout

\begin_layout Itemize

\family typewriter
--save
\family default
 : Save signals to a binary file '
\series bold
signals
\series default
'
\end_layout

\begin_deeper
\begin_layout Itemize
The number of events saved per step is calculated as: 
\family typewriter
nb = MAX_SIGNALS_SAVE / (NbSteps * NB_LED)
\family default
 where MAX_SIGNALS_SAVE = 200 and NB_LED = 3 (LED_A, LED_B, LED_A+B)
\end_layout

\begin_layout Itemize
The traces format is:
\end_layout

\begin_deeper
\begin_layout Itemize
For each trace 1 short with a tag: 0x8000 | (led & 0x3) | (step<<2)
\end_layout

\begin_layout Itemize
For each sample 4 shorts: Anode, Anode*0.1, Anode*30, Dynode
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\family typewriter
--freq=<hz>
\family default
 : LEDs are fired at 
\shape italic
<hz>
\shape default
 frequency.
 Default is 100 Hz (the maximum).
\end_layout

\begin_layout Itemize

\family typewriter
--mkcfg
\family default
 : Create default configuration file '
\series bold
golin.cfg
\series default
'
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
 : Print the version.
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Increase Verbosity
\end_layout

\begin_layout Itemize

\family typewriter
-?
\family default
 : Short Help.
\end_layout

\begin_layout Itemize

\family typewriter
--help
\family default
 : Long Help.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Acqconfig"

\end_inset

Acqconfig
\end_layout

\begin_layout Standard
Create/Modify the acquisition configuration file (on the ramdisk) 
\series bold
AcqConfig.cfg
\series default
.
 At boot time, the default AcqConfig.dat file is copied from /home/user/LSC/confi
g to the ram disk /ram0.
\end_layout

\begin_layout Itemize
Options:
\end_layout

\begin_layout Itemize

\family typewriter
-z, --default : Create a default config file
\end_layout

\begin_layout Itemize

\family typewriter
-c, --config=<path> : Use <path> as default config file
\end_layout

\begin_layout Itemize

\family typewriter
-o, --output=<path> : Use <path> as the output config file
\end_layout

\begin_layout Itemize

\family typewriter
-m, --mod-file=<path> : <path> contains modifications to be applied
\end_layout

\begin_layout Itemize

\family typewriter
-l, --short-list : Print modified items
\end_layout

\begin_layout Itemize

\family typewriter
-L, --long-list : Print the actual content of the config file
\end_layout

\begin_layout Itemize

\family typewriter
-h, --show-items : Print all items that can be modified
\end_layout

\begin_layout Itemize

\family typewriter
--version : Print the version.
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose : Verbose
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help : What you see.
\end_layout

\begin_layout Standard
Below is the list of items that can be modified with acqconfig.
 To modify a parameter, just type acqconfig followed by <param_name>=<value>.
 For example:
\end_layout

\begin_layout Standard

\family typewriter
acqconfig HVPmt=1200
\family default
 sets the default High Voltage value to 1200 Volts.
\end_layout

\begin_layout Standard

\family typewriter
acqconfig v1=1200
\family default
 is exactly the same thing (using the short name)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Param Name    short    Current value 
\end_layout

\begin_layout Plain Layout

              name    (% means decimal          Comment
\end_layout

\begin_layout Plain Layout

                         0x means hexa)
\end_layout

\begin_layout Plain Layout

------------  -----   -------------------------  -------------------------------
---------
\end_layout

\begin_layout Plain Layout

Version      (   v) = 0x4d908120 [%1301315872]    Config version Nb (UTC
 seconds)
\end_layout

\begin_layout Plain Layout

Vem          (  vm) = %50 [0x32]                  VEM in ADU
\end_layout

\begin_layout Plain Layout

T2Algo       (  a2) = %3 [0x3] (Random T2)        T2 Algorithm (1 to 4)
\end_layout

\begin_layout Plain Layout

MaxT1Rate    ( mx1) = %200 [0xc8]                 Maximum authorized T1
 Rate in Hz (default 200)
\end_layout

\begin_layout Plain Layout

MaxT2Rate    ( mx2) = %40 [0x28]                  Maximum T2 Rate in Hz
 (default 40)
\end_layout

\begin_layout Plain Layout

MaxT1Miss    ( ms1) = %200 [0xc8]                 Maximum T1 lost
\end_layout

\begin_layout Plain Layout

MonRate      (  mr) = %5 [0x5]                    Monitoring read out rate
 en seconds.
\end_layout

\begin_layout Plain Layout

MonAverage   (  ma) = %300 [0x12c]                Monitoring averaging and
 sending to cdas in seconds
\end_layout

\begin_layout Plain Layout

MonSend      (   m) = %300 [0x12c]                ?????
\end_layout

\begin_layout Plain Layout

HVPmt        (  v1) = %500 [0x1f4]                PMT High Voltage
\end_layout

\begin_layout Plain Layout

TotA_Thresh  ( tat) = 0x300 [%768]                Time over Threshold A
 threshold
\end_layout

\begin_layout Plain Layout

TotA_Width   ( taw) = 0x80 [%128]                 ...
 width
\end_layout

\begin_layout Plain Layout

TotA_Occup   ( tao) = 0x1 [%1]                    ...
 occupancy
\end_layout

\begin_layout Plain Layout

TotA_Enable  ( tae) = %0 [0x0]                    ...
 enable (1 enabled, 0 disabled)
\end_layout

\begin_layout Plain Layout

TotB_Thresh  ( tbt) = 0x28a [%650]                Same for ToT-B
\end_layout

\begin_layout Plain Layout

TotB_Width   ( tbw) = 0x80 [%128]
\end_layout

\begin_layout Plain Layout

TotB_Occup   ( tbo) = 0x20 [%32]
\end_layout

\begin_layout Plain Layout

TotB_Enable  ( tbe) = %0 [0x0]
\end_layout

\begin_layout Plain Layout

TotD_Lower   ( tdl) = 0x200 [%512]                 Time over Threshold Deconvolu
ted
\end_layout

\begin_layout Plain Layout

TotD_Upper   ( tdu) = 0x264 [%612]
\end_layout

\begin_layout Plain Layout

TotD_Width   ( tdw) = 0x80 [%128]
\end_layout

\begin_layout Plain Layout

TotD_Occup   ( tdo) = 0x20 [%32]
\end_layout

\begin_layout Plain Layout

TotD_FD      (tdfd) = 0x0 [%0]
\end_layout

\begin_layout Plain Layout

TotD_FN      (tdfn) = 0x0 [%0]
\end_layout

\begin_layout Plain Layout

TotD_Enable  ( tde) = %0 [0x0]
\end_layout

\begin_layout Plain Layout

Muon_Enable  ( mue) = %1 [0x1]                    Muon trigger enable
\end_layout

\begin_layout Plain Layout

Soft_Delay   ( sfd) = %100 [0x64]                 Software Trigger Delay
\end_layout

\begin_layout Plain Layout

Soft_enable  ( sfe) = %0 [0x0]                    ...
 Enable (1 enabled, 0 disabled)
\end_layout

\begin_layout Plain Layout

Ext_enable   ( exe) = %0 [0x0]                    External trigger enable
\end_layout

\begin_layout Plain Layout

Grb_enable   ( grb) = %1 [0x1]                    Gamma Ray Burst enable
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Acqstatus"

\end_inset

Acqstatus
\end_layout

\begin_layout Standard
Dump the status of the aqcusition.
\end_layout

\begin_layout Standard
Options
\end_layout

\begin_layout Itemize

\family typewriter
-t
\family default
: the exit vode contains the number of T1.
 Useful when executed from CDAS.
\end_layout

\begin_layout Itemize

\family typewriter
-T
\family default
: the exit code contains the number of T2.
 Useful when executed from CDAS.
\end_layout

\begin_layout Itemize

\family typewriter
-m
\family default
: The exit code contains the number of Muons.
 Useful when executed from CDAS.
\end_layout

\begin_layout Itemize

\family typewriter
-v
\family default
: Verbose mode
\end_layout

\begin_layout Standard
If no option is given, the exit code is made of 3 bits:
\end_layout

\begin_layout Itemize
D0: Acquisition started if 0, 1 otherwise
\end_layout

\begin_layout Itemize
D1: Triggering Started if 0, 1 otherwise
\end_layout

\begin_layout Itemize
D2: Front End present if 0, 1 otherwise
\end_layout

\begin_layout Standard
In normal operation - when triggering is started - in a radio only mast
 or tower, the exit code should be 4.
 In full tanks it should be 0.
\end_layout

\begin_layout Standard
The following information are displayed with '
\family typewriter
acqstatus -v
\family default
'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Aqcuisition Status at 985000718 - 2011/03/24 11:18:38
\end_layout

\begin_layout Plain Layout

  NO Front End Board, Fake Triggers
\end_layout

\begin_layout Plain Layout

  T2 Algo: Random [3]
\end_layout

\begin_layout Plain Layout

  GPS Start Time: 984994924 - 2011/03/24 09:42:04
\end_layout

\begin_layout Plain Layout

Triggers Running
\end_layout

\begin_layout Plain Layout

  GPS Start Time: 984994937 - 2011/03/24 09:42:17
\end_layout

\begin_layout Plain Layout

   Duration 5781 seconds
\end_layout

\begin_layout Plain Layout

  TotA: 0, TotB: 0, TotD: 0, Sft: 0, Ext: 0, Miss: 0, Unk: 564082
\end_layout

\begin_layout Plain Layout

  Total T1: 564082 - T1 Rate: 97.6
\end_layout

\begin_layout Plain Layout

  T2: 112600 - T2 Rate: 19.5
\end_layout

\begin_layout Plain Layout

  DeadTime: 2.128149 (0.037 %), 3.773 us/evt
\end_layout

\begin_layout Plain Layout

  Last T1 at 985000718.016422416
\end_layout

\begin_layout Plain Layout

  Muon: 0, Miss: 0
\end_layout

\begin_layout Plain Layout

  GRB Counter: 717
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Monitstatus
\end_layout

\begin_layout Subsubsection
Minispy
\end_layout

\begin_layout Description
Usage 
\family typewriter
minispy [<options>]
\end_layout

\begin_layout Description
Options
\end_layout

\begin_layout Itemize

\family typewriter
--period=<sec>
\family default
 : Period in seconds (default 5)
\end_layout

\begin_layout Itemize

\family typewriter
-s, --single
\family default
 : Single shot (default is infinite loop)
\end_layout

\begin_layout Itemize

\family typewriter
--version
\family default
 : Print the version.
\end_layout

\begin_layout Itemize

\family typewriter
-v, --verbose
\family default
 : Verbose
\end_layout

\begin_layout Itemize

\family typewriter
-?, --help
\family default
 : What you see now
\end_layout

\begin_layout Subsection
Acquisition Libraries
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Buflib:-Generic-Circular"

\end_inset

Buflib: Generic Circular Buffer Management
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Fblib:-Fast-Buffer"

\end_inset

Fblib: Fast (T1) Buffer Management
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Mblib:-Slow-(muons)"

\end_inset

Mblib: Slow (muons) Buffer Management
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Felib:-Front-End"

\end_inset

Felib: Front End
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Ledlib:-Led-Flasher"

\end_inset

Ledlib: Led Flasher
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Installing a new LSC
\end_layout

\begin_layout Enumerate
Preparation in the lab
\end_layout

\begin_deeper
\begin_layout Enumerate
Connect to the LS with the console cable.
\end_layout

\begin_layout Enumerate
Login as root.
\end_layout

\begin_layout Enumerate
Stop the services and acquisition: 
\family typewriter
srv -v stop
\end_layout

\begin_layout Enumerate
Set ethernet interface 
\begin_inset Quotes eld
\end_inset

local
\begin_inset Quotes erd
\end_inset

: 
\family typewriter
set_local_ip ;
\end_layout

\begin_deeper
\begin_layout Itemize
The local IP address is set as 
\series bold
192.168.1.<nn>
\series default
 where <nn> is the CPU Number (from 97 to 124).
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
cd /root/LSC/config
\end_layout

\begin_layout Enumerate

\family typewriter
buildconfig --loc=<location-name>
\family default
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BuildConfig"

\end_inset

and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Locations.cfg"

\end_inset

)
\end_layout

\begin_layout Enumerate

\family typewriter
halt
\end_layout

\begin_layout Standard
One can now switch off the LSC
\end_layout

\end_deeper
\begin_layout Enumerate
In the field
\end_layout

\begin_deeper
\begin_layout Enumerate
Connect to the LSC with the console cable.
\end_layout

\begin_layout Enumerate
Power on the LSC
\end_layout

\begin_layout Enumerate
Login as root
\end_layout

\begin_layout Enumerate

\family typewriter
cd /ram0
\end_layout

\begin_layout Enumerate

\family typewriter
gpstime yyyy/mm/dd.hh:mm:ss
\family default
 where 
\shape italic
yyyy/...

\shape default
 is the current (reasonnably accurate within 3 minutes) UTC time, to help
 the GPS receiver to get a good TRAIM solution.
\end_layout

\begin_layout Enumerate
After a few seconds, the GPS receiver should be OK.
 Check with
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
gpsstatus -f
\end_layout

\begin_layout Itemize

\family typewriter
srv -v
\end_layout

\begin_layout Itemize

\family typewriter
das -v
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Back to the lab.
\end_layout

\begin_deeper
\begin_layout Itemize
Connect to the LSC with the console cable and connect the ethernet cable.
\end_layout

\begin_layout Itemize
open a Kermit connection
\end_layout

\begin_layout Itemize
Power On the LSC
\end_layout

\begin_layout Itemize
Login as root
\end_layout

\begin_layout Itemize
If available, set ethernet interface to DHCP: 
\family typewriter
set_dhcp_ip
\end_layout

\begin_layout Standard
One can now ssh to the LSC.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Tips and Howtos
\end_layout

\begin_layout Subsection
Changing an LSC cpu number
\end_layout

\begin_layout Standard
If necessary, it is possible to change the cpu number of an LSC.
\end_layout

\begin_layout Itemize
connect to the LSC via the serial line (console)
\end_layout

\begin_layout Itemize
enter the command: 
\family typewriter
\series bold
setcpunb <nnn>
\family default
\series default
 where <nnn> is the desired cpu number.
\end_layout

\begin_layout Itemize
reboot the LSC: 
\family typewriter
\series bold
reboot
\end_layout

\begin_layout Subsection
Testing a new LSC Board
\end_layout

\begin_layout Standard
A test script 
\series bold
lstest
\series default
 is provided to make a first global test of the devices of the board.
 
\series bold
lstest
\series default
 generates log files in the directory 
\shape italic
/scr/LsTests/<nn>/<yymmdd_hhmmss> 
\shape default
where 
\shape italic
<nn>
\shape default
 is the LSC number, and 
\shape italic
<yymmdd_hhmmss>
\shape default
 is the date and time; the summary file is named lstest_<nn>.log (see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lstest-log-file"

\end_inset

 for an example of the lstest log file).
 In order to run 
\series bold
lstest
\series default
 one should
\end_layout

\begin_layout Enumerate
Stop the standard LSC software: 
\family typewriter
srv stop
\end_layout

\begin_layout Enumerate
Set the UTC date (approximately): 
\family typewriter
date --set='YYYY/MM/DD hh:mm:ss'
\end_layout

\begin_layout Enumerate
run lstest: 
\family typewriter
lstest
\end_layout

\begin_layout Standard

\series bold
lstest
\series default
 checks the following devices
\end_layout

\begin_layout Enumerate
The CANBUS, using the TPCB
\end_layout

\begin_layout Enumerate
The Time Taging firmware
\end_layout

\begin_layout Enumerate
The GPS receiver (only read and write access to the receiver)
\end_layout

\begin_layout Enumerate
The generation of 1PPS Interrupts
\end_layout

\begin_layout Enumerate
The FPGA Firmware and /EVTCLKF interrupts generation.
\end_layout

\begin_layout Enumerate
The slowcontrol ADCs (read and check that values read are reasonnable)
\end_layout

\begin_layout Enumerate
The slowcontrol DAC (just set the 4 DAC channels at 1.25 Volts.
 Note that the DACs are set to 0 at the end of this test)
\end_layout

\begin_deeper
\begin_layout Itemize
In order to verify that the DACs output are correct, one should, once 
\series bold
lstest
\series default
 is finished, use the command 
\series bold
ttdac
\series default
.
\end_layout

\end_deeper
\begin_layout Enumerate
Test the Humidity and Temperature sensor SHT11
\end_layout

\begin_layout Enumerate
If the option '-l' is used (
\series bold
lstest -l
\series default
), the commuication with the Led Flasher Controller is also tested.
\end_layout

\begin_layout Standard
At the end of each test, the result is printed to the console and written
 to the log file.
\end_layout

\begin_layout Subsection
Replacing a USB key in a LSC
\end_layout

\begin_layout Enumerate
Connect to the LSC with the serial line and login
\end_layout

\begin_layout Enumerate
Halt the LSC (if still running)
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
halt
\end_layout

\begin_deeper
\begin_layout Itemize
wait till the message 
\begin_inset Quotes eld
\end_inset

system halted
\begin_inset Quotes erd
\end_inset

 appears
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Power off
\end_layout

\begin_layout Enumerate
Replace the key
\end_layout

\begin_layout Enumerate
Power on and login
\end_layout

\begin_layout Enumerate
Update the configuration of the LSC:
\end_layout

\begin_deeper
\begin_layout Enumerate
Set the proper cpu number
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
setcpunb <nnn>
\family default
\series default
 where <nnn> is the number 
\series bold
on the sticker of the LSC
\series default
 (not the one on the key !)
\begin_inset Newline newline
\end_inset

Example: 
\family typewriter
\series bold
setcpunb 124
\end_layout

\end_deeper
\begin_layout Enumerate
Select the static local IP address.
 The static address is made from the cpu number: 192.168.1.<nnn> (otherwise
 DHCP is used).
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
set_local_ip 
\end_layout

\end_deeper
\begin_layout Enumerate
Set the proper position of the tank/mast/tower:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
buildconfig --loc=<location>
\family default
\series default

\begin_inset Newline newline
\end_inset

<location> is the tank/mast/tower name as shown in the file 'locations.cfg'
 (see below the file).
\begin_inset Newline newline
\end_inset

Example: 
\family typewriter
\series bold
buildconfig --loc=a-tank 
\family default
\series default
(case dont care)
\end_layout

\end_deeper
\begin_layout Enumerate
Reboot the LSC:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
\series bold
reboot
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The LSC is ready to run, Ethernet access is available at IP address 192.168.1.<nnn>.
,the GPS position is now OK.
\end_layout

\begin_layout Subsection
Testing a new Trigger Firmware version
\end_layout

\begin_layout Subsubsection
Global test
\end_layout

\begin_layout Standard
The initialisation of the FPGA is made by the shell script 
\family typewriter
/root/LSC/bin/lsinit
\family default
.
 The script loads the FPGA with the file 
\family typewriter
/root/LSC/config/pld.rbf
\family default
 which is a link to the current rbf file 
\family typewriter
cur_pld.rbf
\family default
.
\end_layout

\begin_layout Standard
To test a new version of the pld code:
\end_layout

\begin_layout Enumerate
Download the rbf file to test (let's say 
\family typewriter
new_pld.rbf'
\family default
) into 
\family typewriter
/root/LSC/config
\end_layout

\begin_layout Enumerate
Create a link to this file
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
cd /root/LSC/config
\end_layout

\begin_layout Enumerate

\family typewriter
ln -fs new_pld.rbf pld.rbf
\end_layout

\end_deeper
\begin_layout Enumerate
Restart the LSC software with option '
\family typewriter
--pld
\family default
'
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
srv --pld restar
\family default
t
\begin_inset Newline newline
\end_inset

will stop all LSC specific software, reinitializes the FPGA and restart
 the services and acquisition processes.
\end_layout

\end_deeper
\begin_layout Standard
When finished, if the new version does not work, relink the 
\family typewriter
cur_pld.rbf
\family default
 file to 
\family typewriter
pld.rbf 
\family default
and restart the software with 
\family typewriter
srv --pld restart
\family default
.
\end_layout

\begin_layout Standard
If the new version is OK, rename or copy it as 
\family typewriter
cur_pld.rbf
\family default
 , restart the software with 
\family typewriter
srv --pld restart
\family default
 and that's it.
\end_layout

\begin_layout Subsubsection
Specific test
\end_layout

\begin_layout Enumerate
Download the new rbf file to 
\series bold
/root/LSC/config
\series default
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
scp blabla.rbf root@192.168.2.112:LSC/config
\end_layout

\end_deeper
\begin_layout Enumerate
Kill the standard LSC software
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
srv -v stop
\end_layout

\end_deeper
\begin_layout Enumerate
Load the new code into the FPGA
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
fpga /root/LSC/config/blabla.rbf
\end_layout

\end_deeper
\begin_layout Itemize
Re-initialize CanBus driver
\end_layout

\begin_deeper
\begin_layout Itemize
/root/modprobe125
\end_layout

\end_deeper
\begin_layout Standard
At this point, one can use any test program.
 2 test programs are available:
\end_layout

\begin_layout Itemize

\family typewriter
ttfe
\family default
: does not use the FE library.
 Probably better for first tests, to prepare the FE Library.
\end_layout

\begin_layout Itemize

\family typewriter
ttfenitz
\family default
: uses the FE Library.
\end_layout

\begin_layout Standard
Sources are in 
\family typewriter
\series bold
Acq/src/Tests/FeNitz
\family default
\series default
 and 
\family typewriter
\series bold
Acq/src/Tests/TtFe
\family default
\series default
 respectively.
 Once compiled the executable code are in 
\series bold
Acq/bin_lsc.
\end_layout

\begin_layout Standard
Download the code with:
\end_layout

\begin_layout Itemize

\family typewriter
cd $Acq_Bin
\end_layout

\begin_layout Itemize

\family typewriter
scp ttfe root@<host>:LSC/bin 
\family default
where <host> is the host name or IP address of the LSC (192.168.2.112 at MTU)
\end_layout

\begin_layout Standard
Execute the code with
\end_layout

\begin_layout Itemize

\family typewriter
ssh root@<host>
\end_layout

\begin_layout Itemize

\family typewriter
cd /ram0
\family default

\begin_inset Newline newline
\end_inset

ttfe (as well as most test programs) creates a logfile 
\series bold
'ttfe.log
\series default
'.
 In order to avoid to pollute the /root directory, it is better to set the
 ram disk as the working directory.
\end_layout

\begin_layout Itemize

\family typewriter
ttfe <options>
\end_layout

\begin_layout Subsection
Running without GPS antenna
\end_layout

\begin_layout Standard
It is sometimes necessary to test the LSC software without a GPS antenna
 (or the position is such that the receiver cannot see or track satellites).
 There is a possibility to 
\begin_inset Quotes eld
\end_inset

fool
\begin_inset Quotes erd
\end_inset

 the GPS receiver with a signal telling 
\begin_inset Quotes eld
\end_inset

dont mind the satellites, everything is OK
\begin_inset Quotes erd
\end_inset

.
 Just log to the LSC and issue the command:
\end_layout

\begin_layout Standard

\family typewriter
stop -4001 gpsctrl
\end_layout

\begin_layout Standard
In this case, the 1PPS is generated internally by the GPS receiver itself.
\end_layout

\begin_layout Standard
In order to have a reasonnable GPS time, it is highly recommended to run
 first the command:
\end_layout

\begin_layout Standard

\family typewriter
gpstime 'YYYY/MM/DD hh:mm:ss'
\family default
 to set the GPS receiver time.
 The date here is the 
\series bold
UTC
\series default
 date/time.
\end_layout

\begin_layout Subsection
Setting the GPS Receiver at PowerOn
\end_layout

\begin_layout Standard
Upon PowerOn, in order to help the GPS receiver to acquire satellites and
 become ready, it is good practice to set the GPS receiver time with an
 accuracy better than one minute.
 For this purpose use the command:
\end_layout

\begin_layout Standard

\family typewriter
gpstime 'YYYY/MM/DD hh:mm:ss'
\family default
 where 'YYYY/MM/DD ...' is the 
\series bold
UTC
\series default
 time.
\end_layout

\begin_layout Subsection
How to generate long data streams
\end_layout

\begin_layout Standard
It is possible - to test of the radio interface - to fill almost completely
 the data streams from LS to CDAS with T2 messages.
 It's a bit tricky but works.
 To do that one should modify 2 parameters in the acquisition configuration
 file
\end_layout

\begin_layout Itemize
The T2 algorithm: up to now, 4 T2 algorithms are defined:
\end_layout

\begin_deeper
\begin_layout Itemize
T2_STANDARD_ALGO: compute qualiy of T1, 
\color red
not yet implemented
\color inherit
.
\end_layout

\begin_layout Itemize
T2_LED_ALGO: keep only LED triggers, 
\color red
not yet implemented
\color inherit
.
\end_layout

\begin_layout Itemize
T2_RANDOM_ALGO: generate 20% randomly (used for fakes T1).
\end_layout

\begin_layout Itemize
T2_ALL_ALGO: keep all T1's as T2 up to MAX_T2_RATE
\end_layout

\end_deeper
\begin_layout Itemize
MAX_T2_RATE: the maximum number of timestamps in one T2 message.
 By default it is set at 40.
\end_layout

\begin_layout Standard
By setting the T2 algo at T2_ALL_ALGO (4), at a T1 rate of 100 Hz, 100 T2
 are generated.
 On should then adjust the MAX_T2_RATE in order to fill the 288 bytes of
 a pkt sent to CDAS; in one pkt, with only one message, there is an offset
 of 12 bytes (frame header + message header), plus the GPS second (4 bytes);
 that leaves 272 bytes for the time stamps.
\end_layout

\begin_layout Standard
Thus the maximum of timestamps is 272/3 = 90.
 The good value however is 89, because in addition to the time stamps, on
 additional 24 bytes value is added as the Gamma Ray Burst counter (fake
 for the moment, but ...).
\end_layout

\begin_layout Standard
Thus, to set the proper values:
\end_layout

\begin_layout Enumerate
Log into the LSC (root, root)
\end_layout

\begin_layout Enumerate

\family typewriter
cd /ram0
\end_layout

\begin_layout Enumerate
Change the acquisition configuration file (
\series bold
a2
\series default
 means T2 algo, 
\series bold
mx2
\series default
 means MAX_T2_RATE, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Acqconfig"

\end_inset

 ):
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
acqconfig a2=4 mx2=89
\end_layout

\end_deeper
\begin_layout Enumerate
Restart acquisition: 
\family typewriter
das restart
\end_layout

\begin_layout Enumerate
Restart triggering: 
\family typewriter
stop -12345 control
\end_layout

\begin_layout Description
Note In this case, there is no more room available to send any other message.
 Monitoring messages (sent every 5 minutes) shall never arrive to CDAS,
 as T2 have the highest priority.
\end_layout

\begin_layout Description
Note After a reboot or power on, the acquisition configuration is taken
 from /root/LSC/config.
 Thus it is necessary to repeat the procedure.
 Going back to the normal behaviour, use
\end_layout

\begin_layout Description

\family typewriter
\series medium
acqconfig 
\series default
a2=3 mx2=40
\family default
 (random trigger, maximum t2 rate 40)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Appendix A - Svn Repository Content
\end_layout

\begin_layout Section
Appendix B - Description of the messages
\end_layout

\begin_layout Subsection
M_Ready Message
\end_layout

\begin_layout Standard
The M_READY message is sent by the LSC when it is ready to send data (T2,
 Monitoring blocks, etc) to CDAS (when the GPS becomes OK).
 It is also sent upon request from CDAS (message M_WAKEUP sent by CDAS).
\end_layout

\begin_layout Description
NOTE The format of the M_READY message is 
\color red
NOT the same as in Auger South
\color inherit
.
\end_layout

\begin_layout Enumerate
Run status: 1 byte.
\end_layout

\begin_deeper
\begin_layout Itemize
Reflects the status of the acquisition.
 3 bits (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Acqstatus"

\end_inset

)
\end_layout

\end_deeper
\begin_layout Enumerate
Poweron/reset: 1 byte
\end_layout

\begin_deeper
\begin_layout Itemize
4 bits
\end_layout

\begin_deeper
\begin_layout Itemize
D0; 1 if poweron, 0 if reset (currently always 0, maybe later ...)
\end_layout

\begin_layout Itemize
D1: 1 if first startup, 0 if restart
\end_layout

\begin_layout Itemize
D2: 1 if sent because Wireless was bad and is now ok, 0 for another reason.
\end_layout

\begin_layout Itemize
D3: 0 if 1PPS OK, 1 otherwise.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
GPS/UTC Offset: 1 short int
\end_layout

\begin_layout Enumerate
Software version: 1 unsigned int
\end_layout

\begin_deeper
\begin_layout Itemize
The general format is (hexa): YYMMDDxx, where YY=year, MM=month, DD=day,
 xx=00 if test, 1 if 
\begin_inset Quotes eld
\end_inset

almost final
\begin_inset Quotes erd
\end_inset

, 2 if 
\begin_inset Quotes eld
\end_inset

final
\begin_inset Quotes erd
\end_inset


\begin_inset Newline newline
\end_inset

For example: 0x11083000
\end_layout

\end_deeper
\begin_layout Enumerate
Config version: 1 unsigned int
\end_layout

\begin_layout Enumerate
UTM Northing: 1 signed int
\end_layout

\begin_layout Enumerate
UTM Easting: 1 signed int
\end_layout

\begin_layout Enumerate
Altitude: 1 positive int
\end_layout

\begin_layout Enumerate
Current GPS time: 1 int
\end_layout

\begin_layout Subsection
T2 message
\end_layout

\begin_layout Standard
The timestamps of the Level 2 Triggers are sent every second.
 The format is:
\end_layout

\begin_layout Enumerate
GPS second: 1 int
\end_layout

\begin_layout Enumerate
As many as needed time stamps on 3 bytes:
\end_layout

\begin_deeper
\begin_layout Enumerate
20 LSB: the time in micros relative to the GPS second.
\end_layout

\begin_layout Enumerate
4 MSB: the trigger type (ToT-A, ToT-B, ToT-D, Soft trigger, External Trigger)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A long time ago, these bits were supposed to be an indication of the energy
 of the event.
 This is no longer the case, even in Auger Siuth.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Subsection
Monitoring Message
\end_layout

\begin_layout Standard
The monitoring message is sent every 5 minutes to CDAS.
 The format is fully described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Monitor-block-structure"

\end_inset

.
 It contains only 32 bits integers: averages, minimum and maximum values
 are multiplied by 1000 to avoid use of floats.
\end_layout

\begin_layout Description
NOTE The format of the Monitoring Block message is 
\color red
NOT the same as in Auger South
\color inherit
.
\end_layout

\begin_layout Itemize
GPS time
\end_layout

\begin_layout Itemize
GPS/UTC offset
\end_layout

\begin_layout Itemize
Count: nb of reads to make average
\end_layout

\begin_layout Itemize
ADC Average Array [13 items] (see table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:ADC-AD7554-channels"

\end_inset

for description of the ADC channels)
\end_layout

\begin_layout Itemize
ADC Min Values Array [13 items]
\end_layout

\begin_layout Itemize
ADC Max Values Array [13 items]
\end_layout

\begin_layout Itemize
High Voltage Dac value
\end_layout

\begin_layout Itemize
LSC PCB Temperature Average (SHT11 device)
\end_layout

\begin_layout Itemize
LSC PCB Humidity Average (SHT11 device)
\end_layout

\begin_layout Itemize
LSC PCB Min Temperature (SHT11 device)
\end_layout

\begin_layout Itemize
LSC PCB Max Temperature (SHT11 device)
\end_layout

\begin_layout Itemize
LSC PCB Min Humidity (SHT11 device)
\end_layout

\begin_layout Itemize
LSC PCB Max Humidity (SHT11 device)
\end_layout

\begin_layout Itemize
TPCB Panel Current
\end_layout

\begin_layout Itemize
TPCB Panel Voltage
\end_layout

\begin_layout Itemize
TPCB Load Current
\end_layout

\begin_layout Itemize
TPCB Load Voltage
\end_layout

\begin_layout Itemize
TPCB Athmospheric Pressure
\end_layout

\begin_layout Itemize
TPCB Temperature
\end_layout

\begin_layout Description
Note For the TPCB, only average values are available.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Appendix B - Services data structures and include files
\end_layout

\begin_layout Subsection
Message IDs
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Messages-from-LSC"

\end_inset

Messages from LSC to CDAS (in central_local.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef enum {          /**< Messages from Local to Central station */
\end_layout

\begin_layout Plain Layout

  M_READY,              /**< from Control to CS      */
\end_layout

\begin_layout Plain Layout

  M_RUN_START_ACK,      /**<      Control    CS - Obsolete     */
\end_layout

\begin_layout Plain Layout

  M_RUN_PAUSE_ACK,      /**<      Control    CS - Obsolete     */
\end_layout

\begin_layout Plain Layout

  M_RUN_CONTINUE_ACK,   /**<      Control    CS - Obsolete     */
\end_layout

\begin_layout Plain Layout

  M_RUN_STOP_ACK,       /**<      Control    CS - Obsolete     */
\end_layout

\begin_layout Plain Layout

  M_T2_YES,             /**< 5     Trigger2   CS      */
\end_layout

\begin_layout Plain Layout

  M_T3_EVT,             /**<      EvtSvr     CS      */
\end_layout

\begin_layout Plain Layout

  M_T3_MUONS,           /**<      EvtSvr     CS      */
\end_layout

\begin_layout Plain Layout

  M_CONFIG_SET_ACK,     /**<      Control    CS      */
\end_layout

\begin_layout Plain Layout

  M_MONIT_REQ_ACK,      /**<      CalMon     CS      */
\end_layout

\begin_layout Plain Layout

  M_MONIT_SEND,         /**< 10     CalMon     CS      */
\end_layout

\begin_layout Plain Layout

  M_CALIB_REQ_ACK,      /**<      CalMon     CS      */
\end_layout

\begin_layout Plain Layout

  M_CALIB_SEND,         /**<      CalMon     CS      */
\end_layout

\begin_layout Plain Layout

  M_BAD_SEQUENCE,       /**<      Control    CS      */
\end_layout

\begin_layout Plain Layout

  M_BAD_VERSION,        /**<      Control    CS      */
\end_layout

\begin_layout Plain Layout

  M_MSG_ERROR,          /**<  15    MsgSvrIn   CS      */
\end_layout

\begin_layout Plain Layout

  M_DOWNLOAD_ACK,       /**<      Control to CS      */
\end_layout

\begin_layout Plain Layout

  M_SHELL_CMD_ACK,      /**<      Control to CS      */
\end_layout

\begin_layout Plain Layout

  M_MODULE2FLASH_ACK,   /**<      Control to CS - Obsolete      */
\end_layout

\begin_layout Plain Layout

  M_LOG_SEND,           /**<      Control to CS      */
\end_layout

\begin_layout Plain Layout

  M_UPLOAD_SEND = M_LOG_SEND,
\end_layout

\begin_layout Plain Layout

  M_SET_PARAM_ACK,      /**<  20    Control to CS - Obsolete      */
\end_layout

\begin_layout Plain Layout

  M_UNKNOWN,            /**<      Control    CS      */
\end_layout

\begin_layout Plain Layout

  M_GENERIC_STR = M_UNKNOWN,        /**<        all   to CS
\end_layout

\begin_layout Plain Layout

				  Generic Warning/Error/Whatever ASCII string */
\end_layout

\begin_layout Plain Layout

  M_LAST_CENTRAL        /**<  Must be the LAST */
\end_layout

\begin_layout Plain Layout

} MsgTypeOut;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Messages-from-CDAS"

\end_inset

Messages from CDAS to LSC (in central_local.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef enum {          /* Messages from Central to Local station */
\end_layout

\begin_layout Plain Layout

  M_REBOOT,             /* from CS      to Msgsvr */
\end_layout

\begin_layout Plain Layout

  M_WAKEUP,             /*      CS         Msgsvr */
\end_layout

\begin_layout Plain Layout

  M_RUN_ENABLE,         /*      CS         Control - Obsolete */
\end_layout

\begin_layout Plain Layout

  M_RUN_START_REQ,      /*      CS         Control- Obsolete */
\end_layout

\begin_layout Plain Layout

  M_RUN_PAUSE_REQ,      /*      CS         Control- Obsolete */
\end_layout

\begin_layout Plain Layout

  M_RUN_CONTINUE_REQ,   /*      CS         Control- Obsolete - 5 */
\end_layout

\begin_layout Plain Layout

  M_RUN_STOP_REQ,       /*      CS         Control- Obsolete */
\end_layout

\begin_layout Plain Layout

  M_T3_YES,             /*      CS         EvtSvr  */
\end_layout

\begin_layout Plain Layout

  M_CONFIG_SET,         /*      CS         Control */
\end_layout

\begin_layout Plain Layout

  M_FLASH_TO_CONFIG,    /*      CS         Control */
\end_layout

\begin_layout Plain Layout

  M_CONFIG_TO_FLASH,    /*      CS         Control - 10 */
\end_layout

\begin_layout Plain Layout

  M_MONIT_REQ,          /*      CS         CalMonSvr  */
\end_layout

\begin_layout Plain Layout

  M_CALIB_REQ,          /*      CS         CalMonSvr  */
\end_layout

\begin_layout Plain Layout

  M_DOWNLOAD,           /*      CS         Download - 0xd (13)*/
\end_layout

\begin_layout Plain Layout

  M_DOWNLOAD_CHECK,     /*      CS         Download - 0xe*/
\end_layout

\begin_layout Plain Layout

  M_SHELL_CMD,          /*      CS         Shellcmd (was "OS9_CMD"- 15 */
\end_layout

\begin_layout Plain Layout

  M_MODULE2FLASH,       /*      CS         ControlObsolete */
\end_layout

\begin_layout Plain Layout

  M_LOG_REQ,            /*      CS         Upload */
\end_layout

\begin_layout Plain Layout

  M_UPLOAD_REQ = M_LOG_REQ,
\end_layout

\begin_layout Plain Layout

  M_SET_PARAM,          /*      CS         Control - Obsolete */
\end_layout

\begin_layout Plain Layout

  M_GPS,                /*      CS         GPS - Obsolete     */
\end_layout

\begin_layout Plain Layout

  M_MSG_ERROR_IN,        /*   MsgSvrIn      Control - 20 */
\end_layout

\begin_layout Plain Layout

  M_NO_INPUT,            /* No msg from CDAS expected */
\end_layout

\begin_layout Plain Layout

  M_LAST_LOCAL          /***  Must be the LAST *****/
\end_layout

\begin_layout Plain Layout

} MsgTypeIn;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:GpsConfig"

\end_inset

GpsConfig
\end_layout

\begin_layout Subsubsection
gpscommon (gpscommon.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define SERIAL_NUMBER_LENGTH 18
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

enum {
\end_layout

\begin_layout Plain Layout

  TRAIM_SOLUTION_OK,
\end_layout

\begin_layout Plain Layout

  TRAIM_SOLUTION_ALARM,
\end_layout

\begin_layout Plain Layout

  TRAIM_SOLUTION_UNKNOWN
\end_layout

\begin_layout Plain Layout

} ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int lat_mas ;
\end_layout

\begin_layout Plain Layout

  int lon_mas ;
\end_layout

\begin_layout Plain Layout

  int height ;
\end_layout

\begin_layout Plain Layout

} POSITION_MAS ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int northing ;
\end_layout

\begin_layout Plain Layout

  int easting ;
\end_layout

\begin_layout Plain Layout

  int height ;
\end_layout

\begin_layout Plain Layout

  char zone[4] ;
\end_layout

\begin_layout Plain Layout

} POSITION_UTM ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Gps geography */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int Latitude ;                /**< Coordinates (in MAS) */
\end_layout

\begin_layout Plain Layout

  int Longitude ;
\end_layout

\begin_layout Plain Layout

  int Altitude ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int Northing ;
\end_layout

\begin_layout Plain Layout

  int Easting ;
\end_layout

\begin_layout Plain Layout

  char Zone[4] ;
\end_layout

\begin_layout Plain Layout

} GPS_GEOGRAPHY ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int month, day, year ;
\end_layout

\begin_layout Plain Layout

  int hour, minute, second ;
\end_layout

\begin_layout Plain Layout

  int gmt_offset ;
\end_layout

\begin_layout Plain Layout

  int hour_offset ;		/**< Offset (signed) to GMT */
\end_layout

\begin_layout Plain Layout

  int minute_offset ;		/**<   ..................
    */
\end_layout

\begin_layout Plain Layout

} GPS_TIME ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Tout ! */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int sat_id ;			/**< Satellite ID */
\end_layout

\begin_layout Plain Layout

  int doppler ;			/**< Doppler in Hz */
\end_layout

\begin_layout Plain Layout

  int elevation ;		/**< Elevation in degrees */
\end_layout

\begin_layout Plain Layout

  int azimuth ;			/**< Azimuth in degrees */
\end_layout

\begin_layout Plain Layout

  int health ;			/**< Health - 0 = healthy, 1 = unhealthy */
\end_layout

\begin_layout Plain Layout

} SATELLITE_STATUS ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int satellite ;
\end_layout

\begin_layout Plain Layout

  int frac_time ;
\end_layout

\begin_layout Plain Layout

} SATELLITE_FRACTIONAL ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int svid ;
\end_layout

\begin_layout Plain Layout

  int mode ;
\end_layout

\begin_layout Plain Layout

  int strength ;
\end_layout

\begin_layout Plain Layout

  int iode ;			/**< ????? */
\end_layout

\begin_layout Plain Layout

  int status ;
\end_layout

\begin_layout Plain Layout

} SATELLITE_DATA ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int pulse ;
\end_layout

\begin_layout Plain Layout

  int pps_sync ;		/**< 0 = UTC, 1 = GPS time */
\end_layout

\begin_layout Plain Layout

  int traim_solution ;
\end_layout

\begin_layout Plain Layout

  int traim_status ;
\end_layout

\begin_layout Plain Layout

  unsigned int rem_svid ;
\end_layout

\begin_layout Plain Layout

  unsigned short accuracy ;
\end_layout

\begin_layout Plain Layout

  char sawtooth ;
\end_layout

\begin_layout Plain Layout

  SATELLITE_FRACTIONAL sat_frac[12] ;
\end_layout

\begin_layout Plain Layout

} GPS_TRAIM_STATUS ;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
gpsconfig (gpsconfig.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  GPS_GEOGRAPHY Geography ; /**< Position */
\end_layout

\begin_layout Plain Layout

  int HoldPositionMode ;    /**< 0 if floating position mode
\end_layout

\begin_layout Plain Layout

			                     1 if HoldPosition mode 
\end_layout

\begin_layout Plain Layout

			                     2 if survey mode
\end_layout

\begin_layout Plain Layout

			                */
\end_layout

\begin_layout Plain Layout

  int Time ;                /**< Default initialisation time */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  unsigned int Htype ;	  /**< GPS ellips.
 reference */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  unsigned int Mask ;       /**< Mask angle degrees  0..
 89  */
\end_layout

\begin_layout Plain Layout

  unsigned int AlarmLim ;   /**< Alarm limit in 100s of nsec */
\end_layout

\begin_layout Plain Layout

  unsigned int CabDel   ;   /**< Antenna cable delay nsec    */
\end_layout

\begin_layout Plain Layout

  int GPSoffset ;		   /**< Offset (given by CDAS) */
\end_layout

\begin_layout Plain Layout

  int reserved[16] ;        /**< Reserved for future use */
\end_layout

\begin_layout Plain Layout

} GPS_CONFIG ;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:svrconfig"

\end_inset

svrconfig (svrconfig.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int initialized ;
\end_layout

\begin_layout Plain Layout

  int ServicesVersion ;
\end_layout

\begin_layout Plain Layout

  int CpuNumber ;		/**< Hardware CPU Number */
\end_layout

\begin_layout Plain Layout

  int LsId ;			 /**< Software LS Number (defined by CDAS */
\end_layout

\begin_layout Plain Layout

} SVR_CONFIG ;
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:List-of-signals"

\end_inset

List of signals
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  666 - mufill       - SAVE_CALIB               - Save Calibration to files
\end_layout

\begin_layout Plain Layout

  777 - mufill       - START_MUONRUN            - Start a Muon Run (save
 data to file)
\end_layout

\begin_layout Plain Layout

 1000 - Msgsvr, Gpsctrl - READ_CONFIG              - Re-read Configuration
 file
\end_layout

\begin_layout Plain Layout

 1000 - Download     - DOWNLOAD_RESET           - Reset Download status
\end_layout

\begin_layout Plain Layout

 1001 - ppsirq       - PPS_SEM_ENABLE           - Enable RT semaphore for
 grbread
\end_layout

\begin_layout Plain Layout

 1001 - Msgsvr       - SAVE_CONFIG              - Save Configuration files
\end_layout

\begin_layout Plain Layout

 1100 - Msgsvr       - PPS_IS_GOOD              - PPS Good, tell to Radio
\end_layout

\begin_layout Plain Layout

 1101 - Msgsvr       - PPS_IS_BAD               - PPS Bad,tell Radio
\end_layout

\begin_layout Plain Layout

 1102 - Msgsvr       - GPS_HAS_DATE             - GPS got the date, tell
 Radio
\end_layout

\begin_layout Plain Layout

 1103 - Msgsvr       - GPS_READY                - Ssend M_READY to CDAS
\end_layout

\begin_layout Plain Layout

 2000 - Calmonsvr    - MONIT_SEND               - Send Monitoring block
\end_layout

\begin_layout Plain Layout

 2001 - Calmonsvr,trigger2 - STOP_SAVE                - Stop saving data
 to file
\end_layout

\begin_layout Plain Layout

 2002 - Calmonsvr,trigger2 - START_SAVE               - Start saving data
 to file
\end_layout

\begin_layout Plain Layout

 3000 - All          - RESET_VERBOSE            - Reset Verbosity Level
\end_layout

\begin_layout Plain Layout

 3001 - All          - INCREMENT_VERBOSE        - Increment Verbosity Level
\end_layout

\begin_layout Plain Layout

 3002 - All          - DECREMENT_VERBOSE        - Decrement Verbosity Level
\end_layout

\begin_layout Plain Layout

 3010 - All          - MEMLIB_STATUS_LOG        - Log Memory Usage
\end_layout

\begin_layout Plain Layout

 4000 - Gpsctrl      - GPSCTRL_GET_SATELLITES   - Get Nb of Satellites
\end_layout

\begin_layout Plain Layout

 4001 - Gpsctrl      - GPSCTRL_FORCE_OK         - Force OK even if no Antenna
\end_layout

\begin_layout Plain Layout

 4002 - Gpsctrl      - GPSCTRL_SEND_MREADY      - Send M_READY Msg to CDAS
\end_layout

\begin_layout Plain Layout

 4003 - Gpsctrl      - GPSCTRL_STATUS_STR       - Send Gps Status Generic
 Msg
\end_layout

\begin_layout Plain Layout

 4004 - Gpsctrl      - GPSCTRL_SEND_DATE        - Send Date/time to Radio
\end_layout

\begin_layout Plain Layout

 4005 - Gpsctrl      - GPSCTRL_SET_DATE         - Set Sytem date/time
\end_layout

\begin_layout Plain Layout

 5000 - t1read, grbread - SHOW_NBEVT               - List current nb of
 T1/Grb
\end_layout

\begin_layout Plain Layout

 5001 - t1fake       - FAKE_T1_MIN              - Minimum (1) Fake T1 /
 second
\end_layout

\begin_layout Plain Layout

 5200 - t1fake       - FAKE_T1_MAX              - Maximum (200) Fake T1
 / second
\end_layout

\begin_layout Plain Layout

 6000 - t1fake       - FAKE_NO_RANDOM           - Fixed Period Fake Triggers
\end_layout

\begin_layout Plain Layout

 6001 - t1fake       - FAKE_RANDOM              - Random Period Fake Triggers
\end_layout

\begin_layout Plain Layout

10000 - All          - PPS_SIGNAL_READY         - 1PPS occurred (from ppsirq)
\end_layout

\begin_layout Plain Layout

12345 - Control      - START_TRIGGER            - Start Triggers
\end_layout

\begin_layout Plain Layout

12346 - Control      - STOP_TRIGGER             - Stop Triggers
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Appendix B - Acquisition data structures and include files
\end_layout

\begin_layout Subsection
Time stamps (timestamp.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#if !defined(_TIMESTAMP_H_)
\end_layout

\begin_layout Plain Layout

#define _TIMESTAMP_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned int second ;
\end_layout

\begin_layout Plain Layout

  unsigned int nano ;
\end_layout

\begin_layout Plain Layout

} ONE_TIME ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  ONE_TIME first ;
\end_layout

\begin_layout Plain Layout

  ONE_TIME secnd ;
\end_layout

\begin_layout Plain Layout

} TIME_STAMP ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fast and Muon Events (events.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#if !defined(_EVENTS_H_)
\end_layout

\begin_layout Plain Layout

#define _EVENTS_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*********************
\end_layout

\begin_layout Plain Layout

  Definitions for Fast (aka T1) events
\end_layout

\begin_layout Plain Layout

********************/
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

  At 100 MHz, 1024 samples = 10.24 micros, should be enough
\end_layout

\begin_layout Plain Layout

  With 6 FADC, 10 bits ==> 8 bytes (64 bits) per sample
\end_layout

\begin_layout Plain Layout

   ==> 8 Kbytes per event
\end_layout

\begin_layout Plain Layout

  100 events per second
\end_layout

\begin_layout Plain Layout

   ==> 800 Kbytes per second
\end_layout

\begin_layout Plain Layout

  10 seconds of data stored
\end_layout

\begin_layout Plain Layout

   ==> 8 Mega Bytes
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  As we have 128 Meg of Ram, we could easily use 16 Megs for the event buffer
\end_layout

\begin_layout Plain Layout

   ==> store ~ 20 seconds of T1 data
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

#include "timestamp.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FAST_BUFFER_NAME "FastBuffer"
\end_layout

\begin_layout Plain Layout

#define EVENT_BUFFER_NAME "EvtBuffer"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FAST_SAMPLE_NUMBER 1024
\end_layout

\begin_layout Plain Layout

#define FAST_EVTS_PER_SECOND 100
\end_layout

\begin_layout Plain Layout

#define FAST_EVTS_MAX_TIME 20
\end_layout

\begin_layout Plain Layout

#define EVENT_BUFFER_NB_EVENTS  (FAST_EVTS_PER_SECOND*FAST_EVTS_MAX_TIME)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define FAST_UNKNOWN_TYPE 0xFFFF
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned int fadc123, fadc456;
\end_layout

\begin_layout Plain Layout

} FAST_SAMPLE ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  TIME_STAMP date ;		/**< Starting + falling time */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int micro_off ;		/**< Offset in micros */
\end_layout

\begin_layout Plain Layout

  unsigned short T2T1_type ;	/**< TOT or Threshold or ...
 */
\end_layout

\begin_layout Plain Layout

  unsigned short nsamples ;	/**< Nb of samples.
 Should be equal to
\end_layout

\begin_layout Plain Layout

				 FAST_SAMPLE_NUMBER */
\end_layout

\begin_layout Plain Layout

  unsigned int resvrd[8] ;	/**< Reserved for future use */
\end_layout

\begin_layout Plain Layout

  FAST_SAMPLE data[FAST_SAMPLE_NUMBER] ;
\end_layout

\begin_layout Plain Layout

} FAST_EVENT ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*********************
\end_layout

\begin_layout Plain Layout

  Definitions for Slow (aka Muon) events
\end_layout

\begin_layout Plain Layout

********************/
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

  Maximum 0x2000 muons per "event":
\end_layout

\begin_layout Plain Layout

   A "muon event" IRQ is generated when the muon buffer is full.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

#define MUON_SAMPLE_NUMBER 0x2000
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned char sum, pmt ;
\end_layout

\begin_layout Plain Layout

} MUON_DATA ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned int time_tag ;
\end_layout

\begin_layout Plain Layout

  MUON_DATA sample0, sample1, sample2, sampl3 ;
\end_layout

\begin_layout Plain Layout

} MUON_SAMPLE ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  TIME_STAMP date ;
\end_layout

\begin_layout Plain Layout

  int bufsize  ;
\end_layout

\begin_layout Plain Layout

  MUON_SAMPLE data[MUON_SAMPLE_NUMBER] ;
\end_layout

\begin_layout Plain Layout

} MUON_EVENT ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Monitor-block-structure"

\end_inset

Monitor block structure (monitor.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#if !defined(_MONITOR_H_)
\end_layout

\begin_layout Plain Layout

#define _MONITOR_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*******************************************
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  $Author:: guglielmi          $
\end_layout

\begin_layout Plain Layout

  $Date:: 2010-11-19 15:54:35 #$
\end_layout

\begin_layout Plain Layout

  $Revision:: 247              $
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

********************************************/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Monitor Block */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned int time ;         /**< @brief GPS Time in second */
\end_layout

\begin_layout Plain Layout

  int gps_utc_offset ;		/**< @brief Offset between GPS and UTC time */
\end_layout

\begin_layout Plain Layout

  int count ;                 /**< @brief Nb of items used in averaging
 */
\end_layout

\begin_layout Plain Layout

  int adc[MAX_NB_ADC] ;       /**< @brief Averages of ADC values */
\end_layout

\begin_layout Plain Layout

  int adc_min[MAX_NB_ADC] ;
\end_layout

\begin_layout Plain Layout

  int adc_max[MAX_NB_ADC] ;
\end_layout

\begin_layout Plain Layout

  unsigned int dac ;		  /**< @brief Dac value - No way to read back ! */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int pcb_th,		         /**< @brief Temperature of the LSC PCB (SHT11 sensor)
 */
\end_layout

\begin_layout Plain Layout

    pcb_rh ;		          /**< @brief Humidity ...
 */
\end_layout

\begin_layout Plain Layout

  int pcb_th_min,
\end_layout

\begin_layout Plain Layout

    pcb_th_max,
\end_layout

\begin_layout Plain Layout

    pcb_rh_min,
\end_layout

\begin_layout Plain Layout

    pcb_rh_max ;
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  // TPCB Data
\end_layout

\begin_layout Plain Layout

  int tpcb_panel_current,	 /**< @brief panel current in mAmps */
\end_layout

\begin_layout Plain Layout

    tpcb_panel_voltage,	   /**< @brief panel voltage in mVolts */
\end_layout

\begin_layout Plain Layout

    tpcb_load_current,		/**< @brief load current in mAmps */
\end_layout

\begin_layout Plain Layout

    tpcb_load_voltage,		/**< @brief load voltage in mVolts */
\end_layout

\begin_layout Plain Layout

    tpcb_pressure,		    /**< @brief athmospheric pressure in 10th hpa */
\end_layout

\begin_layout Plain Layout

    tpcb_temperature ;		/**< @brief temperature in 10th degrees */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Radio monitoring data - Preliminary
\end_layout

\begin_layout Plain Layout

    int lr_data[MAX_LR_MONIT_DATA] ; 
\end_layout

\begin_layout Plain Layout

} MONITOR_BLOCK ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  time_t last_update ;		/**< @brief Date of last update */
\end_layout

\begin_layout Plain Layout

  int count ;			     /**< @brief Nb of monitoring measures averaged */
\end_layout

\begin_layout Plain Layout

} mon_tpcb_t ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Definitions for the monitor circular buffer (library BMLib) */
\end_layout

\begin_layout Plain Layout

#define MONITOR_NB_OF_BLOCKS 10
\end_layout

\begin_layout Plain Layout

#define MONITOR_BUFFER_NAME "monitbuf"
\end_layout

\begin_layout Plain Layout

#define SCALE_FACTOR 1000.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
T3 Request Messages (acq_msg.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#if !defined(_ACQ_MSG_H_)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define _ACQ_MSG_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @defgroup acq_msg  Specific Acquisition Message definitions
\end_layout

\begin_layout Plain Layout

 * @ingroup acq_include
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**@{*/
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @file   acq_msg.h
\end_layout

\begin_layout Plain Layout

 * @author Laurent Guglielmi <laurent.guglielmi@apc.univ-paris7.fr>
\end_layout

\begin_layout Plain Layout

 * @date   Wed Feb  9 15:30:31 2011
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * @brief  Specific Acquisition Message definitions
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @struct T2_MESSAGE
\end_layout

\begin_layout Plain Layout

 * @brief Message containing the T2 time stamps, sent every second.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * T2_MESSAGE is made of:
\end_layout

\begin_layout Plain Layout

 *    - 32 bits: The GPS Second of the following T2 time stamps.
\end_layout

\begin_layout Plain Layout

 *    - For each timestamp
\end_layout

\begin_layout Plain Layout

 *        - 4 bits: the event type.
\end_layout

\begin_layout Plain Layout

 *            - 0x7 is specific to GRB data (should be the latest item).
\end_layout

\begin_layout Plain Layout

 *        - 20 bits: the time in <B>microseconds</B> relative to 
\end_layout

\begin_layout Plain Layout

 *          the GPS second.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int seconds ;
\end_layout

\begin_layout Plain Layout

  unsigned char the_t2s[2] ;
\end_layout

\begin_layout Plain Layout

} T2_MESSAGE ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#define EVTID_MASK 0x3FFF
\end_layout

\begin_layout Plain Layout

#define EVTID_AGAIN_SHIFT 14
\end_layout

\begin_layout Plain Layout

#define EVTID_AGAIN_MASK 0x3
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @struct T3_YES_MESSAGE
\end_layout

\begin_layout Plain Layout

 * @brief Message received from CDAS
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * T3 Request Message from CDAS.
 The message is made of
\end_layout

\begin_layout Plain Layout

 *    - evtid: Event ID
\end_layout

\begin_layout Plain Layout

 *    - again: If the same event is requested again
\end_layout

\begin_layout Plain Layout

 *    - time: time stamp in seconds and microseconds
\end_layout

\begin_layout Plain Layout

 *    - microref: offset to the timestamp
\end_layout

\begin_layout Plain Layout

 *    - delta: search between timestamp-delta and timestamp+delta
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  int evtid ;
\end_layout

\begin_layout Plain Layout

  int again ;
\end_layout

\begin_layout Plain Layout

  ONE_TIME time ;
\end_layout

\begin_layout Plain Layout

  unsigned char microref ;
\end_layout

\begin_layout Plain Layout

  unsigned char delta ;
\end_layout

\begin_layout Plain Layout

} T3_YES_MESSAGE ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @struct T3_EVT_MESSAGE_HEADER
\end_layout

\begin_layout Plain Layout

 * @brief T3 Message Header
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * - evtid: Event ID (from CDAS T3 Request)
\end_layout

\begin_layout Plain Layout

 * - comprssed: 1 if compressed, 0 othewise
\end_layout

\begin_layout Plain Layout

 * - error: Error code
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned short evtid ;
\end_layout

\begin_layout Plain Layout

  char compressed ;
\end_layout

\begin_layout Plain Layout

  char error ;
\end_layout

\begin_layout Plain Layout

} T3_EVT_MESSAGE_HEADER ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @struct T3_EVT_MESSAGE
\end_layout

\begin_layout Plain Layout

 * @brief T3 Message
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * The data part of the message is made of
\end_layout

\begin_layout Plain Layout

 *   - The Fast Event
\end_layout

\begin_layout Plain Layout

 *   - CalibX data (Not Implemented Yet)
\end_layout

\begin_layout Plain Layout

 *   - CalibH data (Not Implemented Yet)
\end_layout

\begin_layout Plain Layout

 *   - Ttag data (see below t3_ttag.h file)
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  T3_EVT_MESSAGE_HEADER header ;
\end_layout

\begin_layout Plain Layout

  unsigned char data[4] ;
\end_layout

\begin_layout Plain Layout

} T3_EVT_MESSAGE ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**@}*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Time Tagging data in T3 message (t3_ttag.h)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#if !defined(_T3_TTAG_H_)
\end_layout

\begin_layout Plain Layout

#define _T3_TTAG_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*******************************************
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  $Author:: guglielmi          $
\end_layout

\begin_layout Plain Layout

  $Date:: 2011-01-20 14:11:54 #$
\end_layout

\begin_layout Plain Layout

  $Revision:: 536              $
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

********************************************/
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @defgroup t3_ttag.h  Specific T3 Ttag data definitions
\end_layout

\begin_layout Plain Layout

 * @ingroup acq_include
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**@{*/
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * @file   t3_ttag.h
\end_layout

\begin_layout Plain Layout

 * @author Laurent Guglielmi <laurent.guglielmi@apc.univ-paris7.fr>
\end_layout

\begin_layout Plain Layout

 * @date   Wed Feb  9 15:30:31 2011
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * @brief  Specific T3 Ttag data definitions
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct {
\end_layout

\begin_layout Plain Layout

  unsigned int cur_100,	/**< @brief calib 100 of scurrent econd */
\end_layout

\begin_layout Plain Layout

    next_100,			  /**< @brief calib 100 of second+1 */
\end_layout

\begin_layout Plain Layout

    pprev_saw,			 /**< @brief Sawtooth of second-2 */
\end_layout

\begin_layout Plain Layout

    prev_saw,			  /**< @brief Sawtooth of second-1 */
\end_layout

\begin_layout Plain Layout

    cur_saw,			   /**< @brief Sawtooth of current second */
\end_layout

\begin_layout Plain Layout

    rcv_offset ;		   /**< Receiver offset (from gpsconfig) */
\end_layout

\begin_layout Plain Layout

} TTAG_BLOCK ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**@}*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Configuration Files
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Locations.cfg"

\end_inset

Locations.cfg
\end_layout

\begin_layout Standard
Locations.cfg is an ASCII file containing for each local station its name
 and position, one line per station.
 It is used by 
\series bold
buildconfig
\series default
 to set the 
\series bold
GpsConfig.cfg
\series default
 file.
 The UTM coordinates are here for information and can be omitted; they are
 NOT used by buildconfig, but computed from Latitude/Longitude.
\end_layout

\begin_layout Description
Format
\end_layout

\begin_layout Enumerate
Name.
\end_layout

\begin_layout Enumerate
Latitude in MAS (
\series bold
M
\series default
illi
\series bold
A
\series default
rc
\series bold
S
\series default
econd).
\end_layout

\begin_layout Enumerate
Longitude in MAS.
\end_layout

\begin_layout Enumerate
Altitude in cm.
\end_layout

\begin_layout Enumerate
Northing [optional].
\end_layout

\begin_layout Enumerate
Easting [optional].
\end_layout

\begin_layout Enumerate
UTM Zone [optional].
\end_layout

\begin_layout Description
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Format
\end_layout

\begin_layout Plain Layout

# Name latitude(MAS) longitude(MAS) altitude(cm) Northing Easting Zone
\end_layout

\begin_layout Plain Layout

# UTM coordinates are for information only, not read by buildconfig,
\end_layout

\begin_layout Plain Layout

#   but computed from lat/long by buildconfig.
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Note: case does NOT care
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Locations of the RDA Tanks and Radios
\end_layout

\begin_layout Plain Layout

A-Tower 136521713 -369399101 119400 4199930 709995 13S
\end_layout

\begin_layout Plain Layout

B-Tank 136533215 -369268456 117900 4200367 713176 13S
\end_layout

\begin_layout Plain Layout

C-Tank 136587316 -369345447 116900 4201986 711253 13S
\end_layout

\begin_layout Plain Layout

D-Tank 136641115 -369268717 117100 4203693 713083 13S
\end_layout

\begin_layout Plain Layout

E-Mast 136690069 -369346234 115200 4205153 711152 13S
\end_layout

\begin_layout Plain Layout

F-Mast 136737420 -369273047 115800 4206659 712900 13S
\end_layout

\begin_layout Plain Layout

G-Mast 136789594 -369346264 114800 4208221 711072 13S
\end_layout

\begin_layout Plain Layout

H-Tower 136845002 -369278400 113300 4209972 712683 13S
\end_layout

\begin_layout Plain Layout

I-Mast 136902316 -369347624 114700 4211695 710949 13S
\end_layout

\begin_layout Plain Layout

J-Mast 136947122 -369281639 112700 4213118 712522 13S
\end_layout

\begin_layout Plain Layout

K-Tank 136632637 -369404480 116700 4203346 709776 13S
\end_layout

\begin_layout Plain Layout

L-Tower 136681831 -369479021 119400 4204816 707918 13S
\end_layout

\begin_layout Plain Layout

M-Mast 136631935 -369537078 120600 4203242 706540 13S
\end_layout

\begin_layout Plain Layout

N-Tower 136693489 -369601377 118600 4205100 704923 13S
\end_layout

\begin_layout Plain Layout

O-Mast 136636439 -369669267 119600 4203300 703310 13S
\end_layout

\begin_layout Plain Layout

P-Tank 136585735 -369268450 116200 4201986 713134 13S
\end_layout

\begin_layout Plain Layout

Q-Tank 136624151 -369308194 115700 4203145 712133 13S
\end_layout

\begin_layout Plain Layout

R-Tank 136605989 -369313172 116000 4202582 712026 13S
\end_layout

\begin_layout Plain Layout

S-Tank 136637721 -369345155 116000 4203540 711220 13S
\end_layout

\begin_layout Plain Layout

T-Tank 136624258 -369308682 115700 4203148 712121 13S
\end_layout

\begin_layout Plain Layout

U-Tank 136629933 -369329145 116500 4203310 711617 13S
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Various locations outside the RDA
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

lamar 137087290 -369426520 110600 4217347 708879 13S
\end_layout

\begin_layout Plain Layout

# APC Laboratory ( Paris, Electronics Lab - 5th floor )
\end_layout

\begin_layout Plain Layout

apc 175783723 8580286  5000 5408609 454747 31U
\end_layout

\begin_layout Plain Layout

# Alternate APC location ( Paris, Francois Arado Center )
\end_layout

\begin_layout Plain Layout

face 175779720 8575952 5000 5408493 454638 31U
\end_layout

\begin_layout Plain Layout

# Mines lab location
\end_layout

\begin_layout Plain Layout

CSM-lab 143104978 -378805496 175600 4400126 480814 13S
\end_layout

\begin_layout Plain Layout

# Mines Auger Mounting Hall
\end_layout

\begin_layout Plain Layout

CSM-hall 143086230 -378796215 182000
\end_layout

\begin_layout Plain Layout

# MTU
\end_layout

\begin_layout Plain Layout

mtu 69635225 -318763080 30000 5219757 382783 16T
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Lstest-log-file"

\end_inset

Lstest log file example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

++++++ LsTest - Cpu Number: 98 - Fri Sep 16 08:49:24 UTC 2011
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

>>>> Test TPCB and CAN (may last 1 minute)
\end_layout

\begin_layout Plain Layout

Start Fri Sep 16 08:49:24 2011
\end_layout

\begin_layout Plain Layout

  ==== TPCB and CANBUS OK ====
\end_layout

\begin_layout Plain Layout

>>>> Test TTAG (about 10 seconds)
\end_layout

\begin_layout Plain Layout

TTAG ID: 54545646 - Version: F
\end_layout

\begin_layout Plain Layout

  ==== TTAG OK ==== 
\end_layout

\begin_layout Plain Layout

>>>> Test GPS Receiver (about 1 minute)
\end_layout

\begin_layout Plain Layout

  ==== GPS Receiver OK ==== 
\end_layout

\begin_layout Plain Layout

>>>> Test 1PPS Irq (about 10 seconds)
\end_layout

\begin_layout Plain Layout

  ==== 1PPS IRQ OK ==== 
\end_layout

\begin_layout Plain Layout

>>>> Test FE Trigger
\end_layout

\begin_layout Plain Layout

Front End Board Absent
\end_layout

\begin_layout Plain Layout

  **** NO Front End Board **** 
\end_layout

\begin_layout Plain Layout

Courty FPGA, use Soft Trigger
\end_layout

\begin_layout Plain Layout

Ttag ID: 0x54545646
\end_layout

\begin_layout Plain Layout

Nb Events: 100, Nb IRQ: 100
\end_layout

\begin_layout Plain Layout

Cleanup
\end_layout

\begin_layout Plain Layout

  ==== FE FPGA OK ====
\end_layout

\begin_layout Plain Layout

>>>> Test ADC
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Averages over 10 read
\end_layout

\begin_layout Plain Layout

        FE-1 - 0.000 < 0.000 < 0.000
\end_layout

\begin_layout Plain Layout

        FE-2 - 0.000 < 0.000 < 0.000
\end_layout

\begin_layout Plain Layout

        FE-3 - 0.000 < 0.000 < 0.000
\end_layout

\begin_layout Plain Layout

        FE-4 - 0.000 < 0.000 < 0.000
\end_layout

\begin_layout Plain Layout

      V-BATT - 12.041 < 12.042 < 12.048
\end_layout

\begin_layout Plain Layout

    V-FE-12V - 12.041 < 12.045 < 12.048
\end_layout

\begin_layout Plain Layout

 V-Fpga-1.2V - 1.200 < 1.201 < 1.201
\end_layout

\begin_layout Plain Layout

  V-VCC-3.3V - 3.269 < 3.270 < 3.271
\end_layout

\begin_layout Plain Layout

 V-CORE-1.8V - 1.786 < 1.797 < 1.802
\end_layout

\begin_layout Plain Layout

    I-FE-12V - 0.004 < 0.013 < 0.033
\end_layout

\begin_layout Plain Layout

       I-VCC - 0.098 < 0.329 < 0.584
\end_layout

\begin_layout Plain Layout

      I-BATT - 0.207 < 0.318 < 0.478
\end_layout

\begin_layout Plain Layout

        V-5V - 4.987 < 4.987 < 4.988
\end_layout

\begin_layout Plain Layout

  ==== ADC OK ==== 
\end_layout

\begin_layout Plain Layout

>>> Test DACs 
\end_layout

\begin_layout Plain Layout

  ==== DAC OK ==== 
\end_layout

\begin_layout Plain Layout

>>> Test SHT11  (about 10 seconds)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Averages over 10 measurements
\end_layout

\begin_layout Plain Layout

Temperature - 34.8 < 34.9 < 34.9
\end_layout

\begin_layout Plain Layout

Hygrometry  - 23.9 < 23.9 < 23.9
\end_layout

\begin_layout Plain Layout

  ==== SHT11 OK ==== 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

------------ EVERYTHING OK ------------
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:LSC-Schematics"

\end_inset

LSC Schematics
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/proto2/1-atmel.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LSC Atmel ARM9 CPU
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/proto2/2-FPGA.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LSC: Cyclone
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/proto2/3-FE-FADC.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LSC: FrontEnd and Flash ADCs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/proto2/4-eth-usb-rs232.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LSC: Ethernt, USB, RS232
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Schematics/proto2/5-power-slowctrl.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
LSC: Power Supply, Slow control
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
FrontEnd Schematics
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Devices/FrontEnd/Schematics/schema1.png
	lyxscale 80
	scale 80
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
FrontEnd page 1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Devices/FrontEnd/Schematics/schema2.png
	lyxscale 80
	scale 80
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
FrontEnd page 2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /scr/MtuSvn/an_lsc_sw/trunk/Documents/Devices/FrontEnd/Schematics/schema3.png
	lyxscale 80
	scale 80
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
FrontEnd page 3
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
